Given a binary tree and data value of two of its nodes. Find the number of turns needed to reach from one node to another in the given binary tree.

Example 1:

Input :      
Tree = 
           1
        /    \
       2       3
     /  \     /  \
    4    5   6    7                        
   /        / \                        
  8        9   10   

first node = 5
second node = 10

Output: 4

Explanation : 
Turns will be at 2, 1, 3, 6.

Example 2:

Input :      
Tree = 
           1
        /     \
       2        3
     /  \      /  \
    4    5    6    7                        
   /         / \                        
  8         9   10   

first node = 1
second node = 4  

Output : -1

Explanation: No turn is required since 
they are in a straight line.

Your Task:  
You don't need to read input or print anything. Complete the function NumberOFTurns() which takes root node and data value of 2 nodes as input parameters and returns number of turns required to navigate between them. If the two nodes are in a straight line, ie- the path does not involve any turns, return -1.


Expected Time Complexity: O(N)
Expected Auxiliary Space: O(Height of Tree)


Constraints:
1 ≤ N ≤ 10^3



// { Driver Code Starts
//Initial template for Java

import java.util.LinkedList; 
import java.util.Queue; 
import java.io.*;
import java.util.*;

class Node{
    int data;
    Node left;
    Node right;
    Node(int data){
        this.data = data;
        left=null;
        right=null;
    }
}

class GFG {
    
    static Node buildTree(String str){
        
        if(str.length()==0 || str.charAt(0)=='N'){
            return null;
        }
        
        String ip[] = str.split(" ");
        // Create the root of the tree
        Node root = new Node(Integer.parseInt(ip[0]));
        // Push the root to the queue
        
        Queue<Node> queue = new LinkedList<>(); 
        
        queue.add(root);
        // Starting from the second element
        
        int i = 1;
        while(queue.size()>0 && i < ip.length) {
            
            // Get and remove the front of the queue
            Node currNode = queue.peek();
            queue.remove();
                
            // Get the current node's value from the string
            String currVal = ip[i];
                
            // If the left child is not null
            if(!currVal.equals("N")) {
                    
                // Create the left child for the current node
                currNode.left = new Node(Integer.parseInt(currVal));
                // Push it to the queue
                queue.add(currNode.left);
            }
                
            // For the right child
            i++;
            if(i >= ip.length)
                break;
                
            currVal = ip[i];
                
            // If the right child is not null
            if(!currVal.equals("N")) {
                    
                // Create the right child for the current node
                currNode.right = new Node(Integer.parseInt(currVal));
                    
                // Push it to the queue
                queue.add(currNode.right);
            }
            i++;
        }
        
        return root;
    }
    public static void main (String[] args) throws IOException{
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int t=Integer.parseInt(br.readLine());

        while(t > 0){
            String s = br.readLine();
            Node root = buildTree(s);
            
            String line = br.readLine();
            String[] splitLine = line.split(" ");
            int nd1 = Integer.parseInt(splitLine[0]);
            int nd2 = Integer.parseInt(splitLine[1]);
            int turn;

            Tree g = new Tree();
            if((turn = g.NumberOfTurns(root, nd1, nd2)) != 0)
              System.out.println(turn);
            else
              System.out.println("-1");
            t--;
        }
    }
}
// } Driver Code Ends


//User function Template for Java
/*
Node defined as
class Node{
    int data;
    Node left,right;
    Node(int d){
        data=d;
        left=right=null;
    }
}
*/
class Tree
{
    static boolean inOrder(Node root, Stack<Integer> s, int src, int d){
        if(root==null) return false;
        if(root.data== src || root.data==d) return true;
        if(root.left!=null){
            s.push(0);
            if(inOrder(root.left, s, src, d)) return true;
            s.pop();
        }
        if(root.right!=null){
            s.push(1);
            if(inOrder(root.right, s, src, d)) return true;
            s.pop();
        }
        return false;
    }
    
    static int evaluate(Stack<Integer> s){
        int ans = 0;
        while(!s.isEmpty()){
            int last = s.pop();
            while(!s.isEmpty() && s.peek()==last) s.pop();
            if(!s.isEmpty()) ans++;
        }
        return ans;
    }
    
    static Node lca(Node root, int f, int s){
        if(root==null) return null;
        if(root.data==f || root.data==s) return root;
        Node left = lca(root.left, f, s);
        Node right = lca(root.right, f, s);
        if(left!=null && right!=null) return root;
        return left==null ? right : left;
    }
    
    static int NumberOfTurns(Node root, int first, int second){
        Node ances = lca(root, first, second);
        Stack<Integer> l = new Stack<>(),
        r = new Stack<>();
            
        l.push(0);
        boolean lfound = inOrder(ances.left, l, first, second);
        
        r.push(1);
        boolean rfound = inOrder(ances.right, r, first, second);
        
        // System.out.println("leftpath: "+l+"\nrightpath: "+r);
        if(!lfound) return evaluate(r);
        else if(!rfound) return evaluate(l);
        return 1+evaluate(r)+evaluate(l);
    }
}


