Given an array arr[] of size N, check if it can be partitioned into two parts such that the sum of elements in both parts is the same.

Example 1:

Input: N = 4
arr = {1, 5, 11, 5}
Output: YES
Explaination: 
The two parts are {1, 5, 5} and {11}.

Example 2:

Input: N = 3
arr = {1, 3, 5}
Output: NO
Explaination: This array can never be 
partitioned into two such parts.

Your Task:
You do not need to read input or print anything. Your task is to complete the function equalPartition() which takes the value N and the array as input parameters and returns 1 if the partition is possible. Otherwise, returns 0.


Expected Time Complexity: O(N*sum of elements)
Expected Auxiliary Space: O(N*sum of elements)



import java.io.*;
import java.util.*;

class GFG{
    public static void main(String args[])throws IOException
    {
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        int t = Integer.parseInt(in.readLine());
        while(t-- > 0){
            int N = Integer.parseInt(in.readLine());
            String input_line[] = in.readLine().trim().split("\\s+");
            int arr[] = new int[N];
            for(int i = 0;i < N;i++)
                arr[i] = Integer.parseInt(input_line[i]);
            
            Solution ob = new Solution();
            int x = ob.equalPartition(N, arr);
            if(x == 1)
                System.out.println("YES");
            else
                System.out.println("NO");
        }
    }
}

class Solution{
    static int equalPartition(int N, int arr[]){
        int sum = 0;
        for(int ele : arr) sum+=ele;
        if(sum%2==1) return 0;
        else{
            int c = (sum/2)+1;
            int[][] res = new int[N][c];
            for(int i=arr[0];i<c;i++) res[0][i]=arr[0];
            for(int i = 1; i<N; i++){
                for(int j=1; j<c;j++){
                    if(j>=arr[i]) res[i][j]=Math.max(arr[i]+res[i-1][j-arr[i]], res[i-1][j]);
                    else res[i][j]=res[i-1][j];
                    if(res[i][j]==c-1) return 1;
                }
            }
        }
        return 0;
    }
}