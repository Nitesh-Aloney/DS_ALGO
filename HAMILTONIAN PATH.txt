A Hamiltonian path, is a path in an undirected or directed graph that visits each vertex exactly once. Given an undirected graph  the task is to check if a Hamiltonian path is present in it or not.

Input:
The first line of input contains an integer T denoting the no of test cases. Then T test cases follow. Each test case contains two lines. The first line consists of two space separated integers N and M denoting the number of vertices and number of edges.Then in the next line are M space separated pairs u,v denoting an edge from u to v.

Output:
For each test case in a new line print 1 if a Hamiltonean path exists else print 0.

Constraints:
1<=T<=100
1<=N<=10
1<=M<=15

Example:
Input:
2
4 4
1 2 2 3 3 4 2 4
4 3
1 2 2 3 2 4
Output:
1
0



/*package whatever //do not write package name here */

import java.util.*;
import java.lang.*;
import java.io.*;

class GFG {
    static boolean hamilPath(int[][] graph, boolean[] v, int key, int count){
        v[key] = true;
	count++;
        if(count==graph.length) return true;
        int[] conn  = graph[key];
        for(int i=0;i<graph.length; i++){
            if(conn[i] == 1 && !v[i] && hamilPath(graph, v,  i, count) return true;
        }
        v[key] = false;
	count--;
        return false;
    }
	public static void main (String[] args) {
		//code
		Scanner in = new Scanner(System.in);
		int test = in.nextInt();
		while(test-- > 0){
		    int V = in.nextInt();
		    int e = in.nextInt();
		    int[][] graph = new int[V][V];
		    boolean[] v = new boolean[V];
		    for(int i=0;i<e;i++){
		        int s = in.nextInt()-1, d = in.nextInt()-1;
		        graph[s][d] = 1;
		        graph[d][s] = 1;
		    }
		    boolean hamilPathExists = false;
		    for(int i = 0 ; i < V; i++){
		        if(hamilPath(graph, v, i, 0)){
		            hamilPathExists= true;
		            break;
		        }
		    }
		    System.out.println(hamilPathExists ? 1 : 0);
		}
		in.close();
	}
}