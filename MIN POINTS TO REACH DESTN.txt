Given a grid of size M*N with each cell consisting of an integer which represents points. We can move across a cell only if we have positive points. Whenever we pass through a cell, points in that cell are added to our overall points, the task is to find minimum initial points to reach cell (m-1, n-1) from (0, 0) by following these certain set of rules :
 
1. From a cell (i, j) we can move to (i + 1, j) or (i, j + 1).
2. We cannot move from (i, j) if your overall points at (i, j) are <= 0.
3. We have to reach at (n-1, m-1) with minimum positive points i.e., > 0.

Example 1:

Input: M = 3, N = 3 
       arr[][] = {{-2,-3,3}, 
                  {-5,-10,1}, 
                  {10,30,-5}}; 

Output: 7
Explanation: 7 is the minimum value to
reach the destination with positive
throughout the path. Below is the path.
(0,0) -> (0,1) -> (0,2) -> (1, 2) -> (2, 2)
We start from (0, 0) with 7, we reach
(0, 1) with 5, (0, 2) with 2, (1, 2)
with 5, (2, 2) with and finally we have
1 point (we needed greater than 0 points
at the end).
Example 2:
Input: M = 3, N = 2
       arr[][] = {{2,3}, 
                  {5,10}, 
                  {10,30}}; 
Output: 1
Explanation: Take any path, all of them 
are positive. So, required one point 
at the start




import java.io.*;
import java.util.*;
class GfG
{
    public static void main(String args[])
        {
            Scanner sc = new Scanner(System.in);
            int t = sc.nextInt();
            while(t-->0)
                {
                    int m = sc.nextInt();
                    int n = sc.nextInt();
                    int points[][] = new int[m][n];
                    for(int i = 0;i<m;i++)
                    for(int j = 0;j<n;j++)
                    points[i][j] = sc.nextInt();
                    Solution ob = new Solution();
                    System.out.println(ob.minPoints(points,m,n));
                }
        }
}
class Solution
{
	public int minPoints(int p[][],int m,int n){
	    int[][] rec = new int[m][n];
	    rec[m-1][n-1] = Math.min(0, p[m-1][n-1]);
	    for(int i =m-2;i>=0;i--) rec[i][n-1]=Math.min(0, rec[i+1][n-1]+p[i][n-1]);
	    for(int i =n-2;i>=0;i--) rec[m-1][i]=Math.min(0, rec[m-1][i+1]+p[m-1][i]);
	    for(int i=m-2;i>=0;i--){
	        for(int j=n-2;j>=0;j--){
	            rec[i][j] = Math.min(0,p[i][j]+Math.max(rec[i+1][j], rec[i][j+1]));
	        }
	    }
	    
	    
	   // for(int i=0;i<m;i++) System.out.println(Arrays.toString(rec[i]));
	    return Math.abs(rec[0][0])+1;
	} 
}