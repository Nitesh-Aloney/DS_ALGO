Given two strings 'str' and a wildcard pattern 'pattern' of length N and M respectively,  You have to print '1' if the wildcard pattern is matched with str else print '0' .

The wildcard pattern can include the characters ‘?’ and ‘*’
‘?’ – matches any single character
‘*’ – Matches any sequence of characters (including the empty sequence)

Example 1:

Input:
pattern = "ba*a?"
str = "baaabab"
Output: 1
Explanation: replace '*' with "aab" and '?' with 'b'. 

â€‹Example 2:

Input:
pattern = "a*ab"
str = "baaabab"
Output: 0
Explanation: Because of'a' at first position,
pattern and str can't be matched.


import java.util.*;

class WildcardPattern
{
	public static void main(String args[])
	{
		Scanner sc = new Scanner(System.in);
		int t = sc.nextInt();
		sc.nextLine();
		while(t>0)
		{
			String pat = sc.nextLine();
			String text = sc.nextLine();
			GfG g = new GfG();
			System.out.println(g.wildCard(pat,text));
			t--;
		}
	}
}// } Driver Code Ends


class GfG
{
    int wildCard(String pat, String s)
    {
        // Your code goes here
        int l = s.length(), pl = pat.length();
        boolean[][] rec = new boolean[pl+1][l+1];
        rec[0][0]=true;
        for(int i =1;i<=pl;i++){
            if(pat.charAt(pl-i)=='*') rec[i][0] = rec[i-1][0];
        }
        for(int i = 1; i<= pl; i++){
            char pc = pat.charAt(pl-i);
            for(int j =1; j<=l ; j++){
                if(pc=='*'){
                    rec[i][j]=rec[i][j-1] || rec[i-1][j];
                }else if(pc=='?' || (s.charAt(l-j)==pc)){
                    rec[i][j] = rec[i-1][j-1];
                }else rec[i][j] = false;
            }
        }
        return rec[pl][l] ? 1 : 0;
    }
}
