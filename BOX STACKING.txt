// { Driver Code Starts
//Initial Template for Java


import java.util.*;
import java.lang.*;
import java.io.*;

class gfg
{
    public static void main (String[] args) {
    Scanner sc = new Scanner(System.in);
    int t = sc.nextInt();
    
    //sc.next();
    while(t-- > 0)
    {
        int n = sc.nextInt();
        
        int A[]  =new int[1000];
        int B[] = new int[1000];
        int C[] = new int[1000];
        
        for(int i = 0; i < n; i++)
        {
            int a =sc.nextInt();
            int b = sc.nextInt();
            int c = sc.nextInt();
            
            A[i] = a;
            B[i] = b;
            C[i] = c;
        }
        
        Geeks ob = new Geeks();
        System.out.println(ob.maxHeight(A,B,C,n));
    }
   }
}// } Driver Code Ends


//User function Template for Java
class Box implements Comparable<Box>{
    int l, b, h;
    Box(int l, int b, int h){
        this.l = l; this.b = b; this.h = h;
    }
    @Override
    public String toString(){
        return "("+this.l+","+this.b+","+this.h+")";
    }
    @Override
    public int compareTo(Box x){
        return x.l*x.b-this.l*this.b;
    }
}


class Geeks 
{
    public static int canP(Box b1, Box b2){
        if((b1.l>b2.l && b1.b>b2.b)||(b1.l>b2.b&&b1.b>b2.l)){
            // System.out.println(b2);
            return b1.h;
        }
        return 0;
    }
    public static int maxHeight(int height[], int width[], int length[], int n)
   {
        // your code here
       ArrayList<Box> rec= new ArrayList<>();
       for(int i = 0; i <n; i++){
           int l = length[i], b = width[i], h = height[i];
           rec.add(new Box(l, b, h));
           rec.add(new Box(b, h, l));
           rec.add(new Box(h, l, b));
       }
       Collections.sort(rec);
    //   System.out.println(rec);
    
       int len = rec.size(),
       res = rec.get(0).h;
       for(int i = 1; i < len; i ++){
           int h = rec.get(i).h;
           for(int j = 0; j < i; j++){
               int x = canP(rec.get(j), rec.get(i));
                rec.get(i).h = Math.max(rec.get(i).h, h+x);
                res = Math.max(res, h+x);
           }
       }
       return res;
   }
}

