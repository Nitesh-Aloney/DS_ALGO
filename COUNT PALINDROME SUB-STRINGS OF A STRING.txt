Count Palindrome Sub-Strings of a String 
Medium Accuracy: 49.21% Submissions: 10241 Points: 4
Given a string, the task is to count all palindromic sub-strings present in it.

Input:

The first line of input will contain no of test cases T . Then T test cases follow . Each test case contains 2 lines. The first line of each test case contains an integer N denoting the length of the string, next line of test case contains the string


Output:

For each test case output a single line depecting the number of palindromic substrings present.


Constraints:

1<=T<=100
2<=N<=500


Example:

Input

2
5
abaab
7
abbaeae

Output

3
4

Explanation:

Test Case 1
Input : str = "abaab"
Output: 3
All palindrome substring are : "aba" , "aa" , "baab"

Test Case 2
Input : str = "abbaeae"
Output: 4
All palindrome substring are : "bb" , "abba" ,"aea","eae"



import java.util.*;
import java.lang.*;
import java.io.*;

class GFG {
	public static void main (String[] args) {
		Scanner in = new Scanner(System.in);
		int t = in.nextInt();
		while(t-- > 0){
		    int n = in.nextInt();
		    String s = in.next().trim();
		    boolean[][] rec = new boolean[n][n];
		    int count = n;
		    for(int i=0;i<n;i++) rec[i][i] = true;
		    for(int i=0;i<n-1;i++){
		        if(s.charAt(i)==s.charAt(i+1)){
		            rec[i][i+1] = true;
		            count++;
		        }
		    }
		    for(int i=2;i<n;i++){
		        for(int j=0;j<n-i;j++){
		            int k=j+i;
		            if(s.charAt(j)==s.charAt(k) && rec[j+1][k-1]){
		                rec[j][k]=true;
		                count++;
		            }
		        }
		    }
		    
		    System.out.println(count-n);
		}
		in.close();
	}
}