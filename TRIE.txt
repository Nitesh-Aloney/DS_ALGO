// { Driver Code Starts
// Initial Template for Java

/*package whatever //do not write package name here */

import java.io.*;
import java.util.*;
class GFG {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();

        while (t-- > 0) {
            int n = sc.nextInt();
            sc.nextLine();
            String[] keys = sc.nextLine().split(" ");

            TrieNode root = new TrieNode();
            for (int i = 0; i < n; i++) {
                insert(root, keys[i]);
            }
            String abc = sc.nextLine();
            if (search(root, abc))
                System.out.println(1);
            else
                System.out.println(0);
        }
    }

    static final int ALPHABET_SIZE = 26;

    // trie node
    static class TrieNode {
        TrieNode[] children = new TrieNode[ALPHABET_SIZE];

        // isEndOfWord is true if the node represents
        // end of a word
        boolean isEndOfWord;

        TrieNode() {
            isEndOfWord = false;
            for (int i = 0; i < ALPHABET_SIZE; i++) children[i] = null;
        }
    };

    
 // } Driver Code Ends


// User function Template for Java

/*
static final int ALPHABET_SIZE = 26;

    // trie node
    static class TrieNode
    {
        TrieNode[] children = new TrieNode[ALPHABET_SIZE];

        // isEndOfWord is true if the node represents
        // end of a word
        boolean isEndOfWord;

        TrieNode(){
            isEndOfWord = false;
            for (int i = 0; i < ALPHABET_SIZE; i++)
                children[i] = null;
        }
    };

*/
private static void insertRec(TrieNode root, char[] ch, int i){
    if(i==ch.length) return;
    int ind = ch[i]-'a';
    if(root.children[ind]==null){
        root.children[ind] = new TrieNode();
        if(i==ch.length-1) root.children[ind].isEndOfWord = true;
    }
    insertRec(root.children[ind], ch, i+1);
}

static void insert(TrieNode root, String key) {
    if(root==null) return;
    insertRec(root, key.toCharArray(), 0);
}

private static boolean searchRec(TrieNode root, char[] ch, int i){
    int ind = ch[i]-'a';
    if(root.children[ind]==null) return false;
    return (i==ch.length-1) ? root.children[ch[i]-'a'].isEndOfWord : searchRec(root.children[ind], ch, i+1);
}

static boolean search(TrieNode root, String key) {
    if(key.length() == 0) return false;
    return searchRec(root, key.toCharArray(), 0);
}


// { Driver Code Starts.
}  // } Driver Code Ends