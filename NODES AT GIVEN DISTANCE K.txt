Nodes at given distance in binary tree 
Hard Accuracy: 45.23% Submissions: 15336 Points: 8
Given a binary tree, a target node in the binary tree, and an integer value k, find all the nodes that are at distance k from the given target node. No parent pointers are available.

Example 1:

Input :      
          20
        /    \
      8       22 
    /   \
   4    12 
       /   \
      10    14

Target Node = 8
K = 2

Output: 10 14 22

Explanation: The three nodes at distance 2
from node 8 are 10, 14, 22.



Example 2:

Input :      
         20
       /    \
      7      24
    /   \
   4     3
        /  
       1    

Target Node = 7
K = 2

Output: 1 24

Your Task:  
You dont need to read input or print anything. Complete the function KDistanceNodes() which takes the root of the tree, target and K as input parameters and returns a list of nodes at k distance from target. 


Expected Time Complexity: O(N)
Expected Auxiliary Space: O(height of tree)


Constraints:
1 ≤ N ≤ 10^3
1 ≤ data of node ≤ 10000
1 ≤ target ≤ 10000
1 ≤ k ≤ 20



// { Driver Code Starts
//Initial Template for Java

import java.io.*;
import java.util.*;

class Node  
{ 
    int data; 
    Node left, right; 
   
    public Node(int d)  
    { 
        data = d; 
        left = right = null; 
    } 
}

class GFG
{
    static Node buildTree(String str)
    {
        // Corner Case
        if(str.length() == 0 || str.equals('N'))
            return null;
        String[] s = str.split(" ");
        
        Node root = new Node(Integer.parseInt(s[0]));
        Queue <Node> q = new LinkedList<Node>();
        q.add(root);
        
        // Starting from the second element
        int i = 1;
        while(!q.isEmpty() && i < s.length)
        {
              // Get and remove the front of the queue
              Node currNode = q.remove();
        
              // Get the current node's value from the string
              String currVal = s[i];
        
              // If the left child is not null
              if(!currVal.equals("N")) 
              {
        
                  // Create the left child for the current node
                  currNode.left = new Node(Integer.parseInt(currVal));
        
                  // Push it to the queue
                  q.add(currNode.left);
              }
        
              // For the right child
              i++;
              if(i >= s.length)
                  break;
              currVal = s[i];
        
              // If the right child is not null
              if(!currVal.equals("N")) 
              {
        
                  // Create the right child for the current node
                  currNode.right = new Node(Integer.parseInt(currVal));
        
                  // Push it to the queue
                  q.add(currNode.right);
              }
              
              i++;
        }
    
        return root;
    }
    
    public static void main(String args[]) throws IOException
    {
    
       BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int t = Integer.parseInt(br.readLine().trim());
        while(t>0)
        {
            String s = br.readLine().trim();
            Node root = buildTree(s);
            Solution T = new Solution();
            int target = Integer.parseInt(br.readLine().trim());
            int k = Integer.parseInt(br.readLine().trim());
            ArrayList<Integer> res = new ArrayList<Integer>();
            res = T.KDistanceNodes(root,target,k);
            for(int i = 0;i<res.size();i++)
                System.out.print(res.get(i) + " ");
            System.out.println();    
            t--;
        }
    }
}
// } Driver Code Ends


//User function Template for Java

// class Node  
// { 
//     int data; 
//     Node left, right;
// }

class Solution
{
    static class Data{
        Node n;
        int d;
        Data(Node n, int d){
            this.d=d; this.n=n;
        }
    }
    static Node src, head;
    static Map<Node, Node> mp;
    
    static void traverse(Node root, int target){
        if(root==null) return;
        if(root.data==target) src = root;
        if(root.left==null && root.right==null) return;
        if(root.left!=null) mp.put(root.left, root);
        if(root.right!=null) mp.put(root.right, root);
        traverse(root.left, target);
        traverse(root.right, target);
    }
    public static ArrayList<Integer> KDistanceNodes(Node root, int target , int k){
        if(root==null) return new ArrayList<>();
        
        src=null;   head=root;
        mp = new HashMap<>();
        traverse(root, target);
        
        ArrayList<Integer> res = new ArrayList<>();
        Set<Node> v = new HashSet<>();
        Queue<Data> q = new LinkedList<>();
        q.add(new Data(src, 0));
        while(!q.isEmpty()){
            Data data = q.remove();
            int dis = data.d;   Node n = data.n;
            v.add(n);
            if(dis==k){
                res.add(n.data);
                continue;
            }
            if(n.left!=null && !v.contains(n.left)){
                q.add(new Data(n.left, dis+1));
            }
            if(n.right!=null && !v.contains(n.right)){
                q.add(new Data(n.right, dis+1));
            }
            if(mp.containsKey(n) && !v.contains(mp.get(n))){
                q.add(new Data(mp.get(n), dis+1));
            }
        }
        
        Collections.sort(res);
        return res;
    }
}