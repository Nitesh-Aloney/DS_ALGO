Given a Directed Graph with V vertices and E edges, Find the members of strongly connected components in the graph.

 

Example 1:

Input:

Output:
0 1 2,3,4,
Explanation:

We can clearly see that there are 3 Strongly
Connected Components in the Graph as mentioned
in the Output.

Example 2:

Input:

Output:
0 1 2,
Explanation:
All of the nodes are connected to each other.
So, there's only one SCC as shown.
 

Your Task:
You don't need to read input or print anything. Your task is to complete the function tarjans() which takes the number of vertices V and adjacency list of the graph as input parameters and returns a list of list of integers denoting the members of strongly connected components in the given graph.
Note: A single strongly connected component must be represented in the form of a list if integers sorted in the ascending order. The resulting list should consist of a list of all SCCs which must be sorted in a way such that a lexicographically smaller list of integers appears first. 
 

Expected Time Complexity: O(V + E).
Expected Auxiliary Space: O(V).

 

Constraints:
1 ≤ V  ≤ 105
1 ≤ E  ≤ 105
0 ≤ u, v ≤ N-1



class Solution
{
    int[] disc, low;
    boolean[] inStack;
    int time=0;
    Stack<Integer> s = new Stack<>();
    ArrayList<ArrayList<Integer>> res = new ArrayList<>(),g;
    
    void dfs(int key, int prev){
        s.push(key);
        inStack[key] = true;
        disc[key] = low[key] = ++time;
        for(int conn : g.get(key)){
            if(low[conn]==0){
                dfs(conn, key);
                if(low[key]>low[conn]) low[key] = low[conn];
            }else if(inStack[conn] && low[key]>disc[conn]){
                low[key] = disc[conn];
            }
        }
        if(low[key]==disc[key]){
            ArrayList<Integer> temp = new ArrayList<>();
            while(!s.isEmpty() && s.peek()!=key){
                int ele = s.pop();
                inStack[ele] = false;
                temp.add(ele);
            }
            if(!s.isEmpty()){
                int ele = s.pop();
                inStack[ele] = false;
                temp.add(ele);
            }
            Collections.sort(temp);
            res.add(temp);
        }
    }
    public ArrayList<ArrayList<Integer>> tarjans(int n, ArrayList<ArrayList<Integer>> adj){
        low = new int[n];
        disc = new int[n];
        inStack = new boolean[n];
        
        g = adj;
        for(int i=0;i<n;i++){
            if(low[i]==0) dfs(i, -1);
        }
        Collections.sort(res, new Comparator<ArrayList<Integer>>(){
            @Override
            public int compare(ArrayList<Integer> l1, ArrayList<Integer> l2){
                return l1.get(0)-l2.get(0);
            }
        });
        return res;
    }
}