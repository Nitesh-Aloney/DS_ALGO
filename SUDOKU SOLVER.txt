Given an incomplete Sudoku configuration in terms of a 9 x 9  2-D square matrix (grid[][]), the task to find a solved Sudoku. For simplicity, you may assume that there will be only one unique solution.

Sample Sudoku for you to get the logic for its solution:



Example 1:

Input:
grid[][] = 
[[3 0 6 5 0 8 4 0 0],
[5 2 0 0 0 0 0 0 0],
[0 8 7 0 0 0 0 3 1 ],
[0 0 3 0 1 0 0 8 0],
[9 0 0 8 6 3 0 0 5],
[0 5 0 0 9 0 6 0 0],
[1 3 0 0 0 0 2 5 0],
[0 0 0 0 0 0 0 7 4],
[0 0 5 2 0 6 3 0 0]]
Output:
3 1 6 5 7 8 4 9 2
5 2 9 1 3 4 7 6 8
4 8 7 6 2 9 5 3 1
2 6 3 4 1 5 9 8 7
9 7 4 8 6 3 1 2 5
8 5 1 7 9 2 6 4 3
1 3 8 9 4 7 2 5 6
6 9 2 3 5 1 8 7 4
7 4 5 2 8 6 3 1 9
Your Task:
You need to complete the two functions:
SolveSudoku(): Takes a grid as its argument and returns true if a solution is possible and false if it is not.
printGrid(): Takes a grid as its argument and prints the 81 numbers of the solved Sudoku in a single line with space separation.

Expected Time Complexity: O(9N*N).
Expected Auxiliary Space: O(N*N).

Constraints:
0 ≤ grid[i][j] ≤ 9


import java.util.*;
import java.io.*;
import java.lang.*;

class Driver_class
{
    public static void main(String args[])
    {
        
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        
        while(t-- > 0)
        {
            int grid[][] = new int[9][9];
            for(int i = 0; i < 9; i++)
            {
                for(int j = 0; j < 9; j++)
                grid[i][j] = sc.nextInt();
            }
            
            if(new Sudoku().SolveSudoku(grid) == true)
                new Sudoku().printGrid(grid);
            else
                System.out.print("NO solution exists");
            System.out.println();
            
        }
    }
}

class Sudoku
{
    static boolean isSafe(int[][] sudko, int i, int j, int key){
        for(int ind=0; ind<9; ind++){
            if(j!=ind && sudko[i][ind]==key) return false;
            if(i!=ind && sudko[ind][j]==key) return false;            
        }
        int x = (i/3)*3, y=(j/3)*3;
        for(int x1=x;x1<x+3;x1++){
            for(int y1=y;y1<y+3;y1++){
                if(x1==i && y1==j) continue;
                if(sudko[x1][y1]==key) return false;
            }
        }
        return true;
    }
    
    static boolean SolveSudoku(int[][] sudoku){
        for(int i=0;i<9;i++){
            for(int j=0;j<9;j++){
                if(sudoku[i][j]==0){
                    for(int k=1;k<=9;k++){
                        if(isSafe(sudoku,i,j,k)){
                            sudoku[i][j]=k;
                            if(SolveSudoku(sudoku)){
                                return true;
                            }
                            else sudoku[i][j]=0;
                        }
                    }
                    return false;
                }
            }
        }
        return true;
    }
    
    static void printGrid (int grid[][]){
        String s = "";
        for(int i=0;i<9;i++){
            for(int j=0;j<9;j++){
                s+=grid[i][j]+" ";
            }
        }
        System.out.print(s);
    }
}

