Given an infix expression in the form of string str. Convert this infix expression to postfix expression.

Infix expression: The expression of the form a op b. When an operator is in-between every pair of operands.
Postfix expression: The expression of the form a b op. When an operator is followed for every pair of operands.
â€‹Note: The order of precedence is: ^ greater than * equals to / greater than + equals to -. 
Example 1:

Input: str = "a+b*(c^d-e)^(f+g*h)-i"
Output: abcd^e-fgh*+^*+i-
	abcd^e-fgh*+^*+i-
Explanation:
After converting the infix expression 
into postfix expression, the resultant 
expression will be abcd^e-fgh*+^*+i-
Example 2:

Input: str = "A*(B+C)/D"
Output: ABC+*D/
Explanation:
After converting the infix expression 
into postfix expression, the resultant 
expression will be ABC+*D/
 
Your Task:
This is a function problem. You only need to complete the function infixToPostfix() that takes a string(Infix Expression) as a parameter and returns a string(postfix expression). The printing is done automatically by the driver code.

Expected Time Complexity: O(|str|).
Expected Auxiliary Space: O(|str|).



import java.util.*;
import java.lang.*;
import java.io.*;

class GFG {
    
	public static void main (String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		int t = Integer.parseInt(br.readLine().trim());
		while(t-->0){
		    System.out.println(new solve().infixToPostfix(br.readLine().trim()));
		}
	}
}


class Solution
{
    static boolean isChar(Character c){
        return (c>='a' && c<='z') || (c>='A' && c<='Z');
    }
    static int priority(Character c){
        return (c=='^') ? 3 : (c=='*') ? 2 : (c=='/') ? 1 : (c=='+' || c=='-') ? 0 : -1;
    }
	public static String infixToPostfix(String exp){
	    StringBuilder res = new StringBuilder();
	    Stack<Character> s = new Stack<>();
	    int i=0, n=exp.length();
	    while(i<n){
	        if(exp.charAt(i)=='('){
	            s.push('(');
	        }else if(exp.charAt(i)==')'){
	            while(!s.isEmpty() && s.peek()!='('){
	                res.append(s.pop());
	            }
	            if(!s.isEmpty()) 
	            s.pop();
	        }else if(isChar(exp.charAt(i))){
	            res.append(exp.charAt(i));
	        }else{
	            while(!s.isEmpty() &&
	                   s.peek()!='(' && 
	                   (priority(exp.charAt(i))<=priority(s.peek()))){
	                res.append(s.pop());
	            }
	            s.push(exp.charAt(i));
	        }
	        i++;
	    }
	    while(!s.isEmpty()) res.append(s.pop());
	    return res.toString();
	}
}