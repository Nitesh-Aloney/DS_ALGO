Given a N x N matrix, where every row and column is sorted in non-decreasing order. Find the kth smallest element in the matrix.

Example 1:
Input:
N = 4
mat[][] =     {{16, 28, 60, 64},
                   {22, 41, 63, 91},
                   {27, 50, 87, 93},
                   {36, 78, 87, 94 }}
K = 3
Output: 27
Explanation: 27 is the 3rd smallest element.
 

Example 2:
Input:
N = 4
mat[][] =     {{10, 20, 30, 40}
                   {15, 25, 35, 45}
                   {24, 29, 37, 48}
                   {32, 33, 39, 50}}
K = 7
Output: 30
Explanation: 30 is the 7th smallest element.


Your Task:
You don't need to read input or print anything. Complete the function kthsmallest() which takes the mat, N and K as input parameters and returns the kth smallest element in the matrix.
 

Expected Time Complexity: O(N*Log(N))
Expected Auxiliary Space: O(N)

 

Constraints:
1 <= N <= 50
1 <= mat[][] <= 10000
1 <= K <= N*N


// { Driver Code Starts
//Initial Template for Java

import java.util.*;
class KthSmallestElement{
	public static void main(String[] args){
		Scanner sc=new Scanner(System.in);
		int t=Integer.parseInt(sc.next());
		while(t>0)
		{
			int n=Integer.parseInt(sc.next());
			int[][] a=new int[n][n];
			for(int i=0;i<n;i++)
				for(int j=0;j<n;j++)
    				a[i][j]=Integer.parseInt(sc.next());
    		
			int k=Integer.parseInt(sc.next());
		    Solution ob = new Solution();
		    System.out.println(ob.kthSmallest(a,n,k));
		    
		    t--;
		}
	}
}
// } Driver Code Ends


//User function Template for Java


class Solution
{
    static boolean[] rv, cv;
    static boolean[][] visited;
    static class Data implements Comparable<Data>{
        int x,y,val;
        Data(int val, int x, int y){
            this.val = val;
            this.x = x;
            this.y = y;
        }
        public String toString(){
            return "("+this.val+","+this.x+","+this.y+")";
        }
        @Override
        public int compareTo(Data d){
            return this.val-d.val;
        }
    }
    static void func(int[][] mat, PriorityQueue<Data> q, int r, int c){
        int n = mat.length;
        for(int i=c+1; i<n; i++){
            if(!visited[r][i]){
                visited[r][i]=true;
                q.add(new Data(mat[r][i], r, i));
            }
        }
        for(int i=r+1; i<n; i++){
            if(!visited[i][c]) {
                visited[i][c] = true;
                q.add(new Data(mat[i][c], i, c));
            }
        }
    }
	public static int kthSmallest(int[][]mat,int n,int k)
	{
	    rv = new boolean[n];
	    cv = new boolean[n];
	    visited = new boolean[n][n];
	    PriorityQueue<Data> q =new PriorityQueue<>();
	    q.add(new Data(mat[0][0], 0 , 0));
	    while(!q.isEmpty()){
	        Data d = q.remove();
	        k--;
	        if(k==0) return d.val;
	        func(mat, q, d.x, d.y);
	    }
	    return -1;
    }
}