The set [1, 2, 3, ..., n] contains a total of n! unique permutations.

By listing and labeling all of the permutations in order, we get the following sequence for n = 3:

"123"
"132"
"213"
"231"
"312"
"321"
Given n and k, return the kth permutation sequence.

 

Example 1:

Input: n = 3, k = 3
Output: "213"
Example 2:

Input: n = 4, k = 9
Output: "2314"
Example 3:

Input: n = 3, k = 1
Output: "123"
 

Constraints:

1 <= n <= 9
1 <= k <= n!




// for unique elements this approach will work and is faster.

class Solution {
    int[] fact = {1,1,2,6,24,120,720,5040,40320,362880,3628800};
    public String getPermutation(int n, int k) {
        StringBuilder sb = new StringBuilder();
        List<Integer> list = new LinkedList<>();
        for(int i=0;i<n;i++) list.add(i+1);
        while(k!=0){
            int t = k/fact[list.size()-1]; 
            k -= t*fact[list.size()-1];
            if(k==0){
                sb.append(list.get(t-1));
                list.remove(t-1);
                break;
            }else{
                sb.append(list.get(t));
                list.remove(t);                
            }
        }
        for(int i=list.size()-1;i>=0;i--) sb.append(list.get(i));        
        return sb.toString();
    }
}



//if there are duplicates in the elements this approach will work and is bit slower than above approach.
import java.util.*;

public class GFG {
    static int[] fact = new int[11];
    static{
        fact[0] = 1;
        fact[1] = 1;
        for(int i=2;i<11;i++){
            fact[i] = i*fact[i-1];
        }
    }
    static int nextEle(int[] mp, int i){
        // System.out.println(Arrays.toString(mp)+"   "+i);
        for(int k=i+1;k<26;k++){
            if(mp[k]>0) return k;
        }
        return -1;
    }
    static int calculate(int[] mp, char c){
        int res = 1;
        mp[c-'a']--;
        for(int i=0;i<26;i++) res*=fact[mp[i]];
        mp[c-'a']++;
        return res;
    }
    static String kthPermutation(char[] ch, int rank){
        int[] mp = new int[26];
        char[] ret = new char[ch.length];
        int res=0, i=-1, ind=0, count=ch.length;
        for(char c : ch) mp[c-'a']++;
        while(ind<ch.length){
            i=nextEle(mp, i);
            if(i==-1){
                for(i=25;i>=0;){
                    if(mp[i]==0) i--;
                    else{
                        ret[ind++] = (char)(i+'a');
                        mp[i]--;
                    } 
                } 
                break;
            }
            char c = (char)(i+'a');
            int temp = res + (fact[count-1]/calculate(mp, c));
            if(temp>=rank){
                rank-=res;
                res = 0;
                ret[ind++] = c;
                mp[i]--;
                i=-1;
                count--;
            }else{
                res = temp;
            }
        }
        return String.valueOf(ret);
    }
    public static void main(String[] args) {
        
    }
}
