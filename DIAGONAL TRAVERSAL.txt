Given a Binary Tree, print the diagonal traversal of the binary tree.

Consider lines of slope -1 passing between nodes. Given a Binary Tree, print all diagonal elements in a binary tree belonging to same line.

Example 1:

Input :
            8
         /     \
        3      10
      /   \      \
     1     6     14
         /   \   /
        4     7 13
Output : 8 10 14 3 6 7 13 1 4
Explanation:
unnamed
Diagonal Traversal of binary tree : 
 8 10 14 3 6 7 13 1 4
Your Task:
This is a function problem. You don't have to take input. Just complete the function diagonal() that takes the root node as input and returns the diagonal traversal. (as vector<int> int cpp, as ArrayList<Integer> in java, as list in python)

Expected Time Complexity: O(N).
Expected Auxiliary Space: O(N).
 

Constraints:
1 <= Number of nodes<= 105
1 <= Data of a node<= 105

Note: The Input/Ouput format and Example given are used for system's internal purpose, and should be used by a user for Expected Output only. As it is a function problem, hence a user should not read any input from stdin/console. The task is to complete the function specified, and not to write the full code



class GfG
{
    Map<Integer, ArrarList<Integer>> mp = new TreeMap<>();
    void func(Tree root, int level){
        if(root==null) return;
        if(!mp.containsKey(level)) mp.put(level, new ArrayList<>());
        mp.get(level).add(root.data);
        func(root.right, level);
        func(root.left, level+1);
    }
    public ArrayList<Integer> diagonal(Tree root){
        traverse(root, 0);
        System.out.println(mp);
        ArrayList<Integer> res = new ArrayList<Integer>();
        for(ArrayList<Integer> l : mp.values()) res.addAll(l);
        return res;
    }
}