class Solution{
    int time = 0;
    int[] low,disc;
    Map<Integer, List<Integer>> g =  new HashMap<>();
    List<List<Integer>> res = new ArrayList<>();
    void dfs(int key, int prev){
        disc[key] = low[key] = ++time;
        for(int i : g.get(key)){
            if(i==prev) continue;
            if(low[i]==0){
                dfs(i, key);
                if(low[key]>low[i]) low[key]=low[i];
                if(low[i]>disc[key]){
                    res.add(List.of(key, i));
                }
            }else if(low[key]>disc[i]) low[key] = disc[i];
        }   
    }
    public List<List<Integer>> criticalConnections(int n, List<List<Integer>> connections) {
        low = new int[n];
        disc = new int[n];
        
        for(int i=0;i<n;i++) g.put(i,new LinkedList<>());

        for(List<Integer> conn : connections){
            g.get(conn.get(0)).add(conn.get(1));   g.get(conn.get(1)).add(conn.get(0));
        }
        
        dfs(0,-1);
        
        return res;
    }
}