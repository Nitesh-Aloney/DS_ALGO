Given a string s representing an expression, implement a basic calculator to evaluate it.

 

Example 1:

Input: s = "1 + 1"
Output: 2
Example 2:

Input: s = " 2-1 + 2 "
Output: 3
Example 3:

Input: s = "(1+(4+5+2)-3)+(6+8)"
Output: 23
 

Constraints:

1 <= s.length <= 3 * 105
s consists of digits, '+', '-', '(', ')', and ' '.
s represents a valid expression.

Solution 1:
class Solution{
    String s;
    public int solve(int st, int e){
        Stack<Integer> is = new Stack<>();
        Stack<Character> cs = new Stack<>();
        is.push(0);
        int i=st;
        while(i<e){           
            if(s.charAt(i)==' ') i++;
            else if(s.charAt(i)=='('){
                int j=i+1, bf = 1;
                while(bf!=0){
                    if(s.charAt(j)=='(') bf++;
                    else if(s.charAt(j)==')') bf--;
                    j++;
                }
                is.push(solve(i+1, j-1));
                i=j;
            }else if(s.charAt(i)=='+' || s.charAt(i)=='-'){
                cs.push(s.charAt(i)); i++;
            }else{
                int j=i+1, sres = (int)(s.charAt(i)-'0');
                while(j<e && s.charAt(j)>='0' && s.charAt(j)<='9'){
                    sres = sres*10+(int)(s.charAt(j)-'0');
                    j++;
                }
                is.push(sres);
                i = j;
            }
            if(is.size()>1){
                int top1 = is.pop(), top2 = is.pop();
                is.push(!cs.isEmpty() && cs.pop()=='-' ? -top1+top2 : top1+top2);
            }
            
        }
        while(is.size()>1) is.push(is.pop()+is.pop());
        return is.pop();
    }
    public int calculate(String s){
        this.s = s;
        return solve(0, s.length());
    }
}


Solution 2:
class Solution{
    String s;
    public int solve(int st, int e){
        int i=st, top1=0;
        char cs = '!';
        while(i<e){           
            if(s.charAt(i)==' ') i++;
            else if(s.charAt(i)=='('){
                int j=i+1, bf = 1;
                while(bf!=0){
                    if(s.charAt(j)=='(') bf++;
                    else if(s.charAt(j)==')') bf--;
                    j++;
                }
                top1 += (cs=='!' || cs=='+') ? solve(i+1, j-1) : -solve(i+1, j-1);
                cs = '!';
                i=j;
            }else if(s.charAt(i)=='+' || s.charAt(i)=='-'){
                cs=s.charAt(i); i++;
            }else{
                int j=i+1, sres = (int)(s.charAt(i)-'0');
                while(j<e && s.charAt(j)>='0' && s.charAt(j)<='9'){
                    sres = sres*10+(int)(s.charAt(j)-'0');
                    j++;
                }
                top1 += (cs=='+' || cs=='!') ? sres : -sres;
                i = j;
            }         
        }
        return top1;
    }
    public int calculate(String s){
        this.s = s;
        return solve(0, s.length());
    }
}


Solution 3:

class Solution {
    public int calculate(String eq) {
        int sum=0,sign=1;
        Stack<Integer> s = new Stack<>();
        for(int i=0;i<eq.length();i++){
            if(eq.charAt(i)>='0' && eq.charAt(i)<='9'){
                int sres = 0;
                while(i<eq.length() && eq.charAt(i)>='0' && eq.charAt(i)<='9'){
                    sres = sres*10 + (eq.charAt(i)-'0');
                    i++;
                }
                sum+=sign*sres;
                i--;
            }else if(eq.charAt(i)=='+'){
                sign = 1;
            }else if(eq.charAt(i)=='-'){
                sign = -1;
            }else if(eq.charAt(i)=='('){
                s.push(sum);
                s.push(sign);
                sum=0;
                sign=1;
            }else if(eq.charAt(i)==')'){
                sum *= s.pop();
                sum += s.pop();
            }
        }
        return sum;
    }
}