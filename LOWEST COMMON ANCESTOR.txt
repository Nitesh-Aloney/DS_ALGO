Lowest Common Ancestor in a Binary Tree 
Medium Accuracy: 39.75% Submissions: 54268 Points: 4
Given a Binary Tree with all unique values and two nodes value n1 and n2. The task is to find the lowest common ancestor of the given two nodes. We may assume that either both n1 and n2 are present in the tree or none of them is present. 

Example 1:

Input:
n1 = 2 , n2 =  3
     1
   /  \
  2    3
Output: 1
Explanation:
LCA of 2 and 3 is 1.
Example 2:

Input:
n1 = 3 , n2 = 4
         5
        /
       2
     /  \
    3    4
Output: 2
Explanation: 
LCA of 3 and 4 is 2. 

Your Task:
You don't have to read input or print anything. Your task is to complete the function lca() that takes nodes, n1, and n2 as parameters and returns LCA node as output.

Expected Time Complexity: O(N).
Expected Auxiliary Space: O(H).
Note: H is the height of the tree.

Constraints:
1 <= Number of nodes <= 105
1 <= Data of a node <= 105




import java.util.LinkedList; 
import java.util.Queue; 
import java.io.*;
import java.util.*;

class Node{
    int data;
    Node left;
    Node right;
    Node(int data){
        this.data = data;
        left=null;
        right=null;
    }
}

class GfG {
    
    static Node buildTree(String str){
        
        if(str.length()==0 || str.charAt(0)=='N'){
            return null;
        }
        
        String ip[] = str.split(" ");
        Node root = new Node(Integer.parseInt(ip[0]));
        
        Queue<Node> queue = new LinkedList<>(); 
        
        queue.add(root);
        
        int i = 1;
        while(queue.size()>0 && i < ip.length) {
            
            Node currNode = queue.peek();
            queue.remove();
            String currVal = ip[i];
            if(!currVal.equals("N")) {
                currNode.left = new Node(Integer.parseInt(currVal));
                queue.add(currNode.left);
            }
            i++;
            if(i >= ip.length)
                break;
                
            currVal = ip[i];
                
            // If the right child is not null
            if(!currVal.equals("N")) {
                    
                // Create the right child for the current node
                currNode.right = new Node(Integer.parseInt(currVal));
                    
                // Push it to the queue
                queue.add(currNode.right);
            }
            i++;
        }
        
        return root;
    }
    static void printInorder(Node root)
    {
        if(root == null)
            return;
            
        printInorder(root.left);
        System.out.print(root.data+" ");
        
        printInorder(root.right);
    }
    
	public static void main (String[] args) throws IOException{
	        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
	        
	        int t=Integer.parseInt(br.readLine());
    
	        while(t-- > 0){
	            String input[] = br.readLine().trim().split(" ");
                int a = Integer.parseInt(input[0]);
                int b = Integer.parseInt(input[1]);
	            String s = br.readLine();
    	    	Node root = buildTree(s);
                Tree g = new Tree();
                Node k = g.lca(root,a,b);
    			System.out.println(k.data);
    	        
	        }
	}
}

class Tree
{
    class Data{
       int h;
       Node p;
       Data(Node parent, int height){
           p = parent;
           h = height;
       }
       public String toString(){
           return "("+this.p.data+","+this.h+")";
       }
   }
   Map<Integer, Data> mp = new HashMap<Integer, Data>();
   
    private void preProcess(Node root, int level){
        if(root==null) return;
        if(root.left != null){
            mp.put(root.left.data, new Data(root, level+1));
            preProcess(root.left,level+1);
        }
        if(root.right != null){
            mp.put(root.right.data, new Data(root, level+1));
            preProcess(root.right, level+1);
        }
    }
	Node lca(Node root, int n1,int n2){
	    mp.put(root.data, new Data(new Node(Integer.MIN_VALUE), 0));
	    preProcess(root, 0);
	    if(mp.get(n1).h==0 || mp.get(n2).h==0) return root;
	    int h1 = mp.get(n1).h, h2 = mp.get(n2).h;
	    while(mp.get(n1).p!=mp.get(n2).p){
	        if(h1>h2){
	            if(mp.get(n1).p.data == n2) return mp.get(n1).p;
	            n1=mp.get(n1).p.data;
	            h1--;
	        }else if(h1<h2){
	            if(mp.get(n2).p.data == n1) return mp.get(n2).p;
	            n2=mp.get(n2).p.data;
	            h2--;
	        }else{
	            n1=mp.get(n1).p.data;
	            h1--;
	            n2=mp.get(n2).p.data;
	            h2--;
	        }
	    }
	    return mp.get(n1).p;
	}
	Node lcaRec(Node root, int n1,int n2){
	    if(root==null) return null;
	    if(root.data==n1 || root.data==n2) return root;
	    Node left = lcaRec(root.left, n1, n2);
	    Node right = lcaRec(root.right, n1, n2);
	    if(left!=null && right!=null) return root;
	    else if(left!=null) return left;
	    return right;
	}
}

