Given a matrix containing lower alphabetical characters only of size n*m, we need to count number of palindromic paths in given matrix. A path is defined as a sequence of cells starting from top-left cell and ending at bottom-right cell. We are allowed to move to right and down only from current cell.
 

Example 1:

Input: matrix = {{a,a,a,b},{b,a,a,a},{a,b,b,a}}
Output: 3
Explanation: Number of palindromic paths are 3 
from top-left to bottom-right.
aaaaaa (0, 0) -> (0, 1) -> (1, 1) -> (1, 2) -> 
(1, 3) -> (2, 3)    
aaaaaa (0, 0) -> (0, 1) -> (0, 2) -> (1, 2) -> 
(1, 3) -> (2, 3)    
abaaba (0, 0) -> (1, 0) -> (1, 1) -> (1, 2) -> 
(2, 2) -> (2, 3)

Example 2:

Input: matrix = {{a,b},{c,d}}
Output: 0
Explanation: There is no palindromic paths.
 

Your Task:
You don't need to read or print anyhting. Your task is to complete the function countPalindromicPaths() which takes the matrix as input parameter and returns the total nuumber of palindromic paths modulo 109 + 7.
 

Expected Time Complexity: O(n*m)
Space Complexity: O(n*m)
 

Constraints:
1 <= n, m <= 100




import java.util.*;
import java.lang.*;
import java.io.*;
class GFG
{
    public static void main(String[] args) throws IOException
    {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int T = Integer.parseInt(br.readLine().trim());
        while(T-->0)
        {
            String[] s1 = br.readLine().trim().split(" ");
            int n = Integer.parseInt(s1[0]);
            int m = Integer.parseInt(s1[1]);
            char[][] matrix = new char[n][m];
            for(int i = 0; i < n; i++){
                String S = br.readLine().trim();
                for(int j = 0; j < m; j++){
                    matrix[i][j] = S.charAt(j);
                }
            }
            Solution obj = new Solution();
            int ans = obj.countOfPalindromicPaths(matrix);
            System.out.println(ans);
        }
    }
}
// } Driver Code Ends


//User function Template for Java

class Solution
{
    int mod = (int)1e9+7;
    int m,n;
    Map<String, Integer> mem = new HashMap<>();
    boolean valid(int x, int y){
        return x>=0 && y>=0 && x<m && y<n;
    }
    int util(char[][] mat, int sr, int sc, int er, int ec){
        String hash = sr+"-"+sc+"-"+er+"-"+ec;
        if(mem.containsKey(hash)) return mem.get(hash);
        // System.out.println(hash);
        int res = 0;
        if(er<sr || ec<sc || (mat[sr][sc] != mat[er][ec])) return 0;
        else if(Math.abs(sr-er)+Math.abs(sc-ec) <= 1) return 1;
        else{
            if(valid(sr+1,sc) && valid(er-1,ec)) res = (res + util(mat, sr+1, sc, er-1, ec))%mod;
            if(valid(sr+1,sc) && valid(er,ec-1)) res = (res + util(mat, sr+1, sc, er, ec-1))%mod;
            if(valid(sr,sc+1) && valid(er-1,ec)) res = (res + util(mat, sr, sc+1, er-1, ec))%mod;
            if(valid(sr,sc+1) && valid(er,ec-1)) res = (res + util(mat, sr, sc+1, er, ec-1))%mod;
        }
        mem.put(hash, res);
        return res;
    }
    public int countOfPalindromicPaths(char[][] mat){
        int sr = 0, sc = 0;
        m = mat.length;
        n = mat[0].length;
        return util(mat, sr, sc, m-1, n-1);
    }
}