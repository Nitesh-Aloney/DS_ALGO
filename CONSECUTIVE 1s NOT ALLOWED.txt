Given a positive integer N, count all possible distinct binary strings of length N such that there are no consecutive 1’s. Output your answer modulo 10^9 + 7.

Example 1:

Input:
N = 3
Output: 5
Explanation: 5 strings are (000,
001, 010, 100, 101).
Example 2:

Input:
N = 2
Output: 3
Explanation: 3 strings are
(00,01,10).
Your Task:
Complete the function countStrings() which takes single integer n, as input parameters and returns an integer denoting the answer. You don't to print answer or take inputs. 

Expected Time Complexity: O(N)
Expected Auxiliary Space: O(N)

Constraints:
1 ≤ N ≤ 105


import java.io.*;
import java.util.*;

class GFG {
    // Driver code
    public static void main(String[] args) throws Exception {
        BufferedReader br =
            new BufferedReader(new InputStreamReader(System.in));
        int t = Integer.parseInt(br.readLine().trim());
        while (t-- > 0) {
            int n = Integer.parseInt(br.readLine().trim());

            long ans = new Solution().countStrings(n);

            System.out.println(ans);
        }
    }
}
class Solution {
    long countStrings(int n) {
        long[] a = new long[n+1], b = new long[n+1];
        a[1]=1;b[1]=1;
        for(int i=2;i<=n;i++){
            b[i]=a[i-1];
            a[i]=(a[i-1]+b[i-1])%1000000007;
        }
        // System.out.println("ending with zero :"+Arrays.toString(a)+"\n"+
        //                   "ending with 1 :"+Arrays.toString(b));
        return (a[n]+b[n])%1000000007;
    }
}