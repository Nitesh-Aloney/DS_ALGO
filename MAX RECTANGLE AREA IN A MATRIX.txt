Given a binary matrix. Find the maximum area of a rectangle formed only of 1s in the given matrix.

Example 1:

Input:
n = 4, m = 4
M[][] = {{0 1 1 0},
         {1 1 1 1},
         {1 1 1 1},
         {1 1 0 0}}
Output: 8
Explanation: For the above test case the
matrix will look like
0 1 1 0
1 1 1 1
1 1 1 1
1 1 0 0
the max size rectangle is 
1 1 1 1
1 1 1 1
and area is 4 *2 = 8.
Your Task: 
Your task is to complete the function maxArea which returns the maximum size rectangle area in a binary-sub-matrix with all 1â€™s. The function takes 3 arguments the first argument is the Matrix M[ ] [ ] and the next two are two integers n and m which denotes the size of the matrix M. 

Expected Time Complexity : O(n*m)
Expected Auixiliary Space : O(m)

Constraints:
1<=n,m<=1000
0<=M[][]<=1

Note:The Input/Ouput format and Example given are used for system's internal purpose, and should be used by a user for Expected Output only. As it is a function problem, hence a user should not read any input from stdin/console. The task is to complete the function specified, and not to write the full code.



// { Driver Code Starts
import java.util.*;
import java.lang.*;
class MaxRect {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        while (t-- > 0) {
            int m = sc.nextInt();
            int n = sc.nextInt();
            int[][] a = new int[1000][1000];
            for (int i = 0; i < m; i++)
                for (int j = 0; j < n; j++) a[i][j] = sc.nextInt();
            GfG g = new GfG();

            System.out.println(g.maxArea(a, m, n));
        }
    }
}
// } Driver Code Ends


/*Complete the function given below*/
class GfG {
    public static int area(int hist[], int n)  {
        Stack<Integer> s = new Stack<>(), h = new Stack<>();
        s.push(0);  h.push(hist[0]);
        int ans = 0;
        for(int i=1;i<n;){
            if(s.isEmpty() || h.peek()<=hist[i]){
                s.push(i);  h.push(hist[i++]);
            }
            else{
                int ind=i;
                while(!s.isEmpty() && h.peek()>hist[i]){
                    ind = s.pop();
                    int height = h.pop();
                    ans = Math.max(ans, (i-ind)*height);
                }
                s.push(ind);    h.push(hist[i++]);
            }
        }
        while(!s.isEmpty()){
            int ind = s.pop();
            int height = h.pop();
            ans = Math.max(ans, (n-ind)*height);
        }
        
        return ans;
    }
    public int maxArea(int m[][], int r, int c) {
        int res = area(m[0], c);
        for(int i=1;i<r;i++){
            for(int j=0;j<c;j++){
                if(m[i][j]==1) m[i][j]+=m[i-1][j];
            }
            res = Math.max(res, area(m[i], c));
        }
        return res;
    }
}