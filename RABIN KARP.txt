Given two strings, one is a text string and other is a pattern string. The task is to print the indexes of all the occurences of pattern string in the text string. For printing, Starting Index of a string should be taken as 1.

Example 1:

Input:
S = "batmanandrobinarebat", pat = "bat"
Output: 1 18
Explanation: The string "bat" occurs twice
in S, one starts are index 1 and the other
at index 18. 
â€‹Example 2:

Input: 
S = "abesdu", pat = "edu"
Output: -1
Explanation: There's not substring "edu"
present in S.

Your Task:
You don't need to read input or print anything. Your task is to complete the function search() which takes the string S and the string pat as inputs and returns an array denoting the start indices (1-based) of substring pat in the string S. 


Expected Time Complexity: O(|S|*|pat|).
Expected Auxiliary Space: O(1).


Constraints:
1<=|S|<=105
1<=|pat|<|S|



class Solution
{
    boolean check(String p, String s, int st){
        for(int i=0;i<p.length();i++)
            if(p.charAt(i)!=s.charAt(i+st)) return false;
        return true;
    }
    
    ArrayList<Integer> search(String p, String s){
        ArrayList<Integer> res = new ArrayList<>();
        long ph = 0, sh = 0, mul = 1;
        int i=0, d=10, pl = p.length(), mod = 1000000007;
        for(i=0;i<=s.length();i++){
            if(i<pl){
                ph = (ph*d + p.charAt(i))%mod;
                sh = (sh*d + s.charAt(i))%mod;
                mul = (mul*d)%mod;
            }else{
                if(ph == sh){
                    if(check(p, s, i-pl)) res.add(i-pl+1);
                }
                if(i<s.length()){
                    sh = (sh*d - mul*s.charAt(i-pl) + s.charAt(i))%mod;
                    if(sh<0) sh += mod;
                }
            }
        }
        if(res.size()==0) res.add(-1);
        
        return res;
    }
}