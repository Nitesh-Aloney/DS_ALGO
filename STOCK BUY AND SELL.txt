he cost of stock on each day is given in an array A[] of size N. Find all the days on which you buy and sell the stock so that in between those days your profit is maximum.

Example 1:

Input:
N = 7
A[] = {100,180,260,310,40,535,695}
Output: (0 3) (4 6)
Explanation: We can buy stock on day 
0, and sell it on 3rd day, which will 
give us maximum profit. Now, we buy 
stock on day 4 and sell it on day 6.

Example 2:

Input:
N = 5
A[] = {4,2,2,2,4}
Output: (3 4)
Explanation: We can buy stock on day 
3, and sell it on 4th day, which will 
give us maximum profit.

Your Task:
The task is to complete the function stockBuySell() which takes an array A[] and N as input parameters and finds the days of buying and selling stock. The function must return a 2D list of integers containing all the buy-sell pairs. If there is No Profit, return an empty list.


Expected Time Complexity : O(N)
Expected Auxiliary Space: O(N)


Constraints:
2 <= N <= 103
0 <= Ai <= 104


// { Driver Code Starts
//Initial Template for Java

import java.io.*;
import java.util.*;

class GFG {
    public static void main (String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int t = Integer.parseInt(br.readLine().trim()); //Inputting the testcases
        while(t-->0){
            int n = Integer.parseInt(br.readLine().trim());
            int A[] = new int[n];
            String inputLine[] = br.readLine().trim().split(" ");
            for(int i=0; i<n; i++){
                A[i] = Integer.parseInt(inputLine[i]);
            }
            Solution obj = new Solution();
            ArrayList<ArrayList<Integer> > ans = obj.stockBuySell(A, n);
            if(ans.size()==0)
                System.out.print("No Profit");
            else{
                for (int i=0; i<ans.size(); ++i){
                    System.out.print("("+ans.get(i).get(0)+" "+ans.get(i).get(1)+") ");
                }
            }System.out.println();
        }
    }
}// } Driver Code Ends


//User function Template for Java

class Solution{
    ArrayList<ArrayList<Integer>> stockBuySell(int a[], int n){
        ArrayList<ArrayList<Integer>> res = new ArrayList<>();
        int i=0;
        while(i<n-1){
            int j=i+1;
            if(a[i]!=a[j]){
                while(j<n && a[j]>=a[j-1]) j++;
                if(j>i+1 && a[j-1]>a[i]){
                    ArrayList<Integer> temp = new ArrayList<>();
                    temp.add(i); temp.add(j-1);
                    res.add(temp);
                }
            }
            i=j;
        }
        return res;
    }
}
