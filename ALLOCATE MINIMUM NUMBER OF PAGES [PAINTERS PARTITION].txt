You are given N number of books. Every ith book has Ai number of pages. 
You have to allocate books to M number of students. There can be many ways or permutations to do so. In each permutation, one of the M students will be allocated the maximum number of pages. Out of all these permutations, the task is to find that particular permutation in which the maximum number of pages allocated to a student is minimum of those in all the other permutations and print this minimum value. 

Each book will be allocated to exactly one student. Each student has to be allocated at least one book.

Note: Return -1 if a valid assignment is not possible, and allotment should be in contiguous order (see the explanation for better understanding).

Example 1:

Input:
N = 4
A[] = {12,34,67,90}
M = 2
Output: 113
Explanation: 
Allocation can be done in following ways:
{12} and {34, 67, 90} Maximum Pages = 191
{12, 34} and {67, 90} Maximum Pages = 157
{12, 34, 67} and {90}  Maximum Pages =113
Therefore, the minimum of these cases is 
113, which is selected as the output.
Example 2:

Input:
N = 3
A[] = {15,17,20}
M = 2
Output: 32
Explanation: Allocation is done as 
{15,17} and {20}
Your Task:
Complete findPages() function that takes a, n, and m as arguments and returns the expected answer.

Expected Time Complexity : O(NlogN)
Expected Auxilliary Space : O(1)





/*package whatever //do not write package name here */

import java.io.*;
import java.util.*;
class GFG {
	public static void main (String[] args) {
		Scanner sc=new Scanner(System.in);
		
		int t=sc.nextInt();
		
		while(t-->0)
		{
		    int n=sc.nextInt();
		    int a[]=new int[n];
		    
		    for(int i=0;i<n;i++)
		    {
		        a[i]=sc.nextInt();
		    }
		    int m=sc.nextInt();
		    System.out.println(findPages(a,n,m));
		}
	}
	
    
 // } Driver Code Ends


//User function Template for Java
static boolean possible(int[] a, int k, int target){
    int sum=0;
    for(int ele:a){
        if(ele>target) return false;
        sum+=ele;
        if(sum>target){
            sum=ele; k--;
        }
    }
    return k>=1;
}
static int findPagesUtil(int[] a, int s, int e, int k){
    if(s==e) return s;
    int mid = (s+e)/2;
    if(possible(a, k, mid)) return findPagesUtil(a,s,mid,k);
    return findPagesUtil(a,mid+1,e,k);
}
public static int findPages(int[]a,int n,int m)
{
    //Your code here
    int sum = 0;
    for(int ele : a) sum+=ele;
    return findPagesUtil(a, a[0], sum, m);
}

// { Driver Code Starts.

}  // } Driver Code Ends