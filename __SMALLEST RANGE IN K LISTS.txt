Given K sorted lists of integers of size N each, find the smallest range that includes at least one element from each of the K lists. If more than one such range's are found, find the first such range found.

Example 1:

Input:
N = 5, K = 3
KSortedArray[][] = {{1 3 5 7 9},
                    {0 2 4 6 8},
                    {2 3 5 7 11}}
Output: 1 2
Explanation: K = 3
A:[1 3 5 7 9]
B:[0 2 4 6 8]
C:[2 3 5 7 11]
Smallest range is formed by number 1
present in first list and 2 is present
in both 2nd and 3rd list.
Example 2:

Input:
N = 4, K = 3
KSortedArray[][] = {{1 2 3 4},
                    {5 6 7 8},
                    {9 10 11 12}}
Output: 4 9
Your Task :

Complete the function findSmallestRange() that receives array , array size n and k as parameters and returns the output range (as a pair<int,int> in cpp and array of size 2 in java and python)

Expected Time Complexity : O(n * k *log k)
Expected Auxilliary Space  : O(k)

Constraints:
1 <= K,N <= 500


// { Driver Code Starts
import java.util.*;
import java.io.*;
import java.lang.*;

public class DriverClass
{
	public static void main(String args[]) 
	{
	   Scanner sc = new Scanner(System.in);
	   int t = sc.nextInt();
	   int range[];
	   while(t-- >0)
	   {
	     int n = sc.nextInt();
	     int k = sc.nextInt();
	     int arr[][] = new int[k][n];
	       for(int i = 0; i < k; i++)
	       {
	        for(int j = 0; j < n; j++)
	               arr[i][j] = sc.nextInt();
	       }
	       range = new smallestRangeFromKLists().findSmallestRange(arr, n, k);
	       System.out.println(range[0] + " " + range[1]);
	   }
	}
}
// } Driver Code Ends


class smallestRangeFromKLists
{
	static int[] findSmallestRange(int[][] a,int n,int k)
	{
	    int[] res = {0, Integer.MAX_VALUE}, p = new int[k];
	    boolean brk = false;
	    while(!brk){
    	   // System.out.println(Arrays.toString(res)+"\n"+Arrays.toString(p));
	        int min = 0, max = 0;
    	    for(int i = 0; i < k; i++){
    	        if(a[i][p[i]] < a[min][p[min]]) min = i;
    	        if(a[i][p[i]] >= a[max][p[max]]) max = i;
    	    }
    	   // System.out.println(min+"   "+max);
    	   // System.out.println(a[max][p[max]]+"   "+a[min][p[min]]);
    	    if(a[max][p[max]]-a[min][p[min]] < res[1]-res[0]){ 
    	        res[0] = a[min][p[min]]; 
    	        res[1] = a[max][p[max]]; 
    	    }
    	    if(res[1]==res[0]) return res;
    	    
    	    p[min]++;
    	    if(p[min] == n){
    	       brk = true;
    	       break;
    	    }
    	   // System.out.println(Arrays.toString(res)+"\n"+Arrays.toString(p)+"\n");
	    }
	    return res;
	}
}