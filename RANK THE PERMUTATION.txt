Given a string, find the rank of the string amongst its permutations sorted lexicographically. 
Return 0 if the characters are repeated in the string.
The answer might not fit in an integer, so return your answer % 1000003


Example 1:

Input:
S = "abc"
Output:
1
Explanation:
The order permutations with letters 
'a', 'c', and 'b' : 
abc
acb
bac
bca
cab
cba
 

Example 2:

Input:
S = "acb"
Output:
2

Your Task:
You don't need to read input or print anything.Your task is to complete the function findRank() which takes the string S as input parameter and returns the rank of the string amongst its permutations.

This function returns 0 if the characters are repeated in the string.

Expected Time Complexity: O(|S|)
Expected Auxiliary Space: O(|S|)

Note: |S| represents the length of string S.

Constraints:

1 ≤ |S| ≤ 26



class Solution
{
    static int[] fact = new int[26];
    static int mod = 1000003;
    static{
        fact[0] = 1;
        for(int i=1;i<26;i++) fact[i] = (i*fact[i-1])%mod;
    }
    static int find(List<Character> l, char key){
        for(int i=0;i<l.size();i++){
            if(l.get(i)==key) return i;
        }
        return -1;
    }
    static int func(char[] ch, List<Character> l, int n){
        int res = 0;
        for(int i=0;i<n;i++){
            int pos = find(l, ch[i]);
            l.remove(new Character(ch[i]));
            if(pos==0) continue;
            res=(res+(pos)*fact[l.size()])%mod;
        }
        return res+1;
    }
    public int findRank(String S){
        short[] mp = new short[26];
        char[] ch = S.toCharArray();
        for(char c : ch){
            mp[c-'a']++;
            if(mp[c-'a']==2) return 0;
        }
        List<Character> list = new LinkedList<>();
        for(int i=0;i<26;i++){
            if(mp[i]!=0) list.add((char)(i+'a'));
        }
        return func(ch, list, ch.length);
    }
}