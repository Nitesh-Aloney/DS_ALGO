Given two arrays X and Y of positive integers, find the number of pairs such that xy > yx (raised to power of) where x is an element from X and y is an element from Y.

Example 1:

Input: 
M = 3, X[] = [2 1 6] 
N = 2, Y[] = [1 5]
Output: 3
Explanation: 
The pairs which follow xy > yx are 
as such: 21 > 12,  25 > 52 and 61 > 16 .
Example 2:

Input: 
M = 4, X[] = [2 3 4 5]
N = 3, Y[] = [1 2 3]
Output: 5
Explanation: 
The pairs for the given input are 
21 > 12 , 31 > 13 , 32 > 23 , 41 > 14 , 
51 > 15 .

Your Task:
This is a function problem. You only need to complete the function countPairs() that takes X, Y, M, N as parameters and returns the total number of pairs.

Expected Time Complexity: O((N + M)log(N)).
Expected Auxiliary Space: O(1).

Constraints:
1 ≤ M, N ≤ 105
1 ≤ X[i], Y[i] ≤ 103




import java.util.*;
import java.io.*;
import java.lang.*;

class Sorting 
{
    	public static void main (String[] args) throws Exception
	{
	    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int t = Integer.parseInt(br.readLine());
        for(int g = 0;g < t;g++)
        {
            String[] str = (br.readLine()).trim().split(" ");
            int n = Integer.parseInt(str[0]);
            int m = Integer.parseInt(str[1]);
            
            int[] x = new int[n];
            str = (br.readLine()).trim().split(" ");
            for(int i = 0;i< n;i++)
                x[i] = Integer.parseInt(str[i]);
                
            str = (br.readLine()).trim().split(" ");
            int[] y = new int[m];
            for(int i = 0;i< m;i++)
            {
                y[i] = Integer.parseInt(str[i]);
                
            }
            System.out.println(new Num_of_pair().countPairs(x, y, n, m));
           
        }
	}
}
// } Driver Code Ends


//User function Template for Java

class Num_of_pair
{
    static int numbersGreaterThan(int x, int[] y, int s, int e){
        if(e<s) return 0;
        else if(e==s) return y[s]>x ? y.length-s : 0;
        else{
            int m = (s+e)/2;
            if(y[m]>x) return numbersGreaterThan(x, y, s, m);
            else return numbersGreaterThan(x, y, m+1, e);
        }
    }
    static long countPairs(int x[], int y[], int n, int m){
        Arrays.sort(y);
        
        long res = 0;
        int[] count_y = new int[5];
              
        for(int ele:y) if(ele<5) count_y[ele]++;
        
        for(int i=0;i<n;i++){
            if(x[i]==0) continue;
            else if(x[i]==1){
                res += count_y[0];
            }else if(x[i]==2){
                res += m-count_y[2]-count_y[3]-count_y[4];
            }else if(x[i]==3){
                res += m-count_y[3];
            }else{
                int count = numbersGreaterThan(x[i], y, 0, y.length-1);
                // System.out.println("target : "+x[i]+"   count: "+count);
                res += count_y[0]+count_y[1]+count;
            }
        }
        
        return res;
        
    }
}