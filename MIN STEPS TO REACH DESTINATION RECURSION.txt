Given an infinite number line. You start at 0 and can go either to the left or to the right. The condition is that in the ith move, youmust take i steps. Given a destination D , find the minimum number of steps required to reach that destination.

Example 1:

Input: D = 2
Output: 3
Explaination: The steps takn are +1, -2 and +3.
Example 2:

Input: D = 10
Output: 4
Explaination: The steps are +1, +2, +3 and +4.
Your Task:
You do not need to read input or print anything. Your task is to complete the function minSteps() which takes the value D as input parameter and returns the minimum number of steps required to reach the dedstination D from 0.

Expected Time Complexity: O(D)
Expected Auxiliary Space: O(1)

Constraints:
1 â‰¤ D â‰¤ 10000



import java.io.*;
import java.util.*;

class GFG{
    public static void main(String args[])throws IOException
    {
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        int t = Integer.parseInt(in.readLine());
        while(t-- > 0){
            int D = Integer.parseInt(in.readLine());
            
            Solution ob = new Solution();
            System.out.println(ob.minSteps(D));
        }
    }
}

class Solution{
    static int util(int s, int step, int d){
        if(Math.abs(s)>d) return Integer.MAX_VALUE;
        if(s==d) return step;
        int neg = util(s-step-1, step+1, d);
        int pos = util(s+step+1, step+1, d);
        return Math.min(pos, neg);
    }
    static int minSteps(int d){
        if(d<=1) return d;
        return util(1, 1, d);
    }
}