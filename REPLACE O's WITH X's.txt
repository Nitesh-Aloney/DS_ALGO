Given a matrix of size NxM where every element is either ‘O’ or ‘X’, replace ‘O’ with ‘X’ if surrounded by ‘X’. A ‘O’ (or a set of ‘O’) is considered to be by surrounded by ‘X’ if there are ‘X’ at locations just below, just above, just left and just right of it.

Examples:

Input: mat[N][M] =  {{'X', 'O', 'X', 'X', 'X', 'X'},
                     {'X', 'O', 'X', 'X', 'O', 'X'},
                     {'X', 'X', 'X', 'O', 'O', 'X'},
                     {'O', 'X', 'X', 'X', 'X', 'X'},
                     {'X', 'X', 'X', 'O', 'X', 'O'},
                     {'O', 'O', 'X', 'O', 'O', 'O'},
                    };
Output: mat[N][M] =  {{'X', 'O', 'X', 'X', 'X', 'X'},
                      {'X', 'O', 'X', 'X', 'X', 'X'},
                      {'X', 'X', 'X', 'X', 'X', 'X'},
                      {'O', 'X', 'X', 'X', 'X', 'X'},
                      {'X', 'X', 'X', 'O', 'X', 'O'},
                      {'O', 'O', 'X', 'O', 'O', 'O'},
                    };

Input: mat[N][M] =  {{'X', 'X', 'X', 'X'}
                     {'X', 'O', 'X', 'X'}
                     {'X', 'O', 'O', 'X'}
                     {'X', 'O', 'X', 'X'}
                     {'X', 'X', 'O', 'O'}
                    };
Input: mat[N][M] =  {{'X', 'X', 'X', 'X'}
                     {'X', 'X', 'X', 'X'}
                     {'X', 'X', 'X', 'X'}
                     {'X', 'X', 'X', 'X'}
                     {'X', 'X', 'O', 'O'}
                    };

import java.util.*;

public class GFG {
    static int[] dx = {0,1,0,-1},
                 dy = {1,0,-1,0};
    static int r,c;
    static char[][] grid;
    static boolean isBoundary(int x, int y){
        return x==0 || y==0 || x==r-1 || y==c-1;
    }
    static boolean valid(int x, int y){
        return x>=0 && y>=0 && x<r && y<c;
    }
    static void dfs(int x, int y){
        grid[x][y] = 'E';
        for(int i=0;i<4;i++){
            int k = x+dx[i], l = y+dy[i];
            if(valid(k,l) && grid[k][l]=='O') dfs(k,l);
        }
    }

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int test = in.nextInt();
        while(test-- >0){
            r = in.nextInt();
            c = in.nextInt();
            grid = new char[r][c];
            for(int i= 0; i < r; i++)
                for (int j = 0; j < c; j++)
                    grid[i][j] = in.next().charAt(0);

            for (int i = 0; i < r; i++)
                for (int j = 0; j < c; j++)
                    if(isBoundary(i,j) && grid[i][j]=='O') dfs(i,j);

            for (int i = 0; i < r; i++)
                for (int j = 0; j < c; j++)
                   System.out.print((grid[i][j]=='E' ? 'O' : 'X')+" ");

            System.out.println();
        }

        in.close();
    }
}