Given an undirected graph and an edge, the task is to find if the given edge is a bridge in graph, i.e., removing the edge disconnects the graph.

Input:
The first line of the input contains an integer 'T' denoting the number of test cases. Then 'T' test cases follow. Each test case consists of two lines. 
Description of  test cases is as follows:
The First line of each test case contains two integers 'N' and 'M'  which denotes the no of vertices and no of edges respectively.
The Second line of each test case contains M space-separated pairs u and v denoting that there is a bidirectional edge from u to v.
The third line contains two space-separated integers denoting the edge to be removed.

Output:
Output 1 if the edge is a Bridge and output 0 otherwise.

Your Task:
You don't need to read input or print anything. Your task is to complete the function isBridge() which takes the graph g, number of vertices V and the two end vertices s and e of an edge as inputs and returns true if the given edge is a Bridge. Else, it returns false.

Expected Time Complexity: O(N + M).
Expected Auxiliary Space: O(N).

Constraints:
1 <= T <= 10
1 <= N, M <= 100000
0 <= u, v <= N-1
Example:

Input:

2
4 3
0 1 1 2 2 3
1 2
5 5
1 2 2 0 1 0 3 4 3 0
2 0

Output:

1
0




import java.io.*;
import java.util.*;

class Graph {
    int v;
    int e;

    ArrayList<Integer>[] edges;

    public Graph(int v, int e) {
        this.v = v;
        this.e = e;

        edges = new ArrayList[v];
        for (int i = 0; i < v; i++) {
            edges[i] = new ArrayList<Integer>();
        }
    }

    public void addEdge(int u, int v) {
        edges[u].add(v);
        edges[v].add(u);
    }

}

class Gfg {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        while (t-- > 0) {
            int v = sc.nextInt();
            int e = sc.nextInt();

            Graph g = new Graph(v, e);

            for (int i = 0; i < e; i++) {
                g.addEdge(sc.nextInt(), sc.nextInt());
            }

            Solution obj = new Solution();
            if (obj.isBridge(g, sc.nextInt(), sc.nextInt()))
                System.out.println (1);
            else
                System.out.println (0);
        }
    }
}

class Solution {
    int dfs(ArrayList<Integer>[] g, int key, boolean[] v){
        int res = 0;
        v[key]=true;
        for(int conn : g[key]){
            if(!v[conn]){
                res+=dfs(g, conn, v);
            }
        }
        return 1+res;
    }

    public boolean isBridge(Graph adj, int s, int e){
        ArrayList<Integer>[] g = adj.edges;
        // System.out.println(Arrays.toString(g));
        int re = dfs(g, s, new boolean[adj.v]);
        g[s].remove(new Integer(e));
        g[e].remove(new Integer(s));
        // System.out.println(Arrays.toString(g));
        int res = dfs(g, s, new boolean[adj.v]);
        int ree = dfs(g, e, new boolean[adj.v]);
        
        return (res+ree == re);
    }
}