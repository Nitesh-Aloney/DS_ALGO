A top secret message containing letters from A-Z is being encoded to numbers using the following mapping:

'A' -> 1
'B' -> 2
...
'Z' -> 26
You are an FBI agent. You have to determine the total number of ways that message can be decoded.
Note: An empty digit sequence is considered to have one decoding. It may be assumed that the input contains valid digits from 0 to 9 and If there are leading 0’s, extra trailing 0’s and two or more consecutive 0’s then it is an invalid string.

Example :
Given encoded message "123",  it could be decoded as "ABC" (1 2 3) or "LC" (12 3) or "AW"(1 23).
So total ways are 3.

Input:
First line contains the test cases T.  1<=T<=1000
Each test case have two lines
First is length of string N.  1<=N<=40
Second line is string S of digits from '0' to '9' of N length.

Example:
Input:
2
3
123
4
2563
Output:
3
2


import java.util.*;
import java.lang.*;
import java.io.*;

class GFG {
	public static void main (String[] args) {
		Scanner in = new Scanner(System.in);
		int t = in.nextInt();
		while(t-- > 0){
		    int n = in.nextInt();
		    String s = in.next();
		    int[] res = new int[n+1];
		    res[0]=1;
		    if(s.charAt(0)=='0') res[1]=0;
		    else res[1]=1;
		    for(int i=2;i<=n;i++){
		        int cu = Integer.parseInt(s.substring(i-1,i)),
		        cu2 = Integer.parseInt(s.substring(i-2,i));
		        if(cu!=0) res[i]+=res[i-1];
		        if(cu2>9 && cu2<=26) res[i]+=res[i-2];
		    }
		  //  System.out.println(Arrays.toString(res));
		  System.out.println(res[n]);
		}
		in.close();
	}
}