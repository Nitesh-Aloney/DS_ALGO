Given a boolean expression with following symbols.

Symbols
    'T' ---> true
    'F' ---> false

And following operators filled between symbols

Operators
    &   ---> boolean AND
    |   ---> boolean OR
    ^   ---> boolean XOR

Count the number of ways we can parenthesize the expression so that the value of expression evaluates to true.

For Example:
The expression is "T | T & F ^ T", it evaluates true
in 4 ways ((T|T)&(F^T)), (T|(T&(F^T))), (((T|T)&F)^T)
and (T|((T&F)^T)).

Return No_of_ways Mod 1003.

Input:
First line contains the test cases T.  1<=T<=500
Each test case have two lines
First is length of string N.  1<=N<=100
Second line is string S (boolean expression).
Output:
No of ways Mod 1003.
 

Example:
Input:
2
7
T|T&F^T
5
T^F|F

Output:
4
2



/*package whatever //do not write package name here */

import java.util.*;
import java.lang.*;
import java.io.*;

class GFG {
    static int mod = 1003;
    public static void func(char[] tf, char[] op){
        int n = tf.length;
        int[][] t = new int[n][n], f = new int[n][n];
        for(int i = 0 ; i < n ; i++){
            t[i][i] = (tf[i]=='T') ? 1 : 0;
            f[i][i] = (tf[i]=='F') ? 1 : 0;
        }
        for(int d = 1; d<n; d++){
            for(int i=0;i<n-d;i++){
                int j=i+d;
                for(int k=i;k<j;k++){
                    if(op[k]=='|'){
                        t[i][j]+=((t[i][k]*(f[k+1][j]+t[k+1][j])%mod)%mod)+((f[i][k]*t[k+1][j])%mod);
                        f[i][j]+=(f[i][k]*f[k+1][j])%mod;
                    }else if(op[k]=='^'){
                        t[i][j]+=((t[i][k]*f[k+1][j])%mod)+((f[i][k]*t[k+1][j])%mod);
                        f[i][j]+=((f[i][k]*f[k+1][j])%mod)+((t[i][k]*t[k+1][j])%mod);
                    }else if(op[k]=='&'){
                        f[i][j]+=((f[i][k]*(f[k+1][j]+t[k+1][j])%mod)%mod)+((t[i][k]*f[k+1][j])%mod);
                        t[i][j]+=(t[i][k]*t[k+1][j])%mod;
                    }
                    t[i][j] %= mod;
                    f[i][j] %= mod;
                }
            }
        }
        // for(int i=0;i<n;i++) System.out.println(Arrays.toString(t[i]));
        // for(int i=0;i<n;i++) System.out.println(Arrays.toString(f[i]));
        System.out.println(t[0][n-1]);
    }
	public static void main (String[] args){
		Scanner in = new Scanner(System.in);
		int test = in.nextInt();
		while(test-- >0){
		    int n = in.nextInt();
		    char[] s = in.next().toCharArray();
		    char[] tf = new char[n/2+1],
		    op = new char[n/2];
		    for(int i = 0 ; i < n; i+=2){
		        tf[i/2]=s[i];
		    }
		    for(int i = 1 ; i < n; i+=2){
		        op[i/2]=s[i];
		    }
		  //  System.out.println("Booleans : "+Arrays.toString(tf)+
		  //                     "\noperators : "+Arrays.toString(op));
		    func(tf, op);
		}
		in.close();
	}
}