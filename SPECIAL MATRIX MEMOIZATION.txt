You are given a matrix having N rows and M columns. The special property of this matrix is that some of the cells of this matrix are blocked
i.e. they cannot be reached. Now you have to start from the cell (1,1) and reach the end (N,M) provided during the journey you can move horizontally right from the current cell or vertically down from the current cell.
Can you answer the number of ways you can traverse the matrix obeying the above constraints starting from (1,1) and ending at (N,M).

Output your answer modulo 10^9+7.

Input :
Example
Input
1
3 3 2
1 2 3 2
Output :   
1

/*package whatever //do not write package name here */

import java.util.*;
import java.lang.*;
import java.io.*;

class GFG {
    static int[] x={0,1}, y={1,0};
    static int count = 0;
    static long func(long[][] mat, int m, int n){
        if(m==0 && n==0) return 1;
        else if(mat[m][n]==-1) return 0;
        else if(mat[m][n]!=0) return mat[m][n];
        else{
            long up =0, left = 0;
            if(m-1>=0) up = func(mat, m-1, n);
            if(n-1>=0) left = func(mat, m, n-1);
            mat[m][n] = (up+left)%1000000007;
            return mat[m][n];
        }
    }
	public static void main (String[] args) {
		Scanner in = new Scanner(System.in);
		int test =in.nextInt();
		for(int t =0;t<test;t++){
		    int m = in.nextInt(), n = in.nextInt();
		    long[][] mat = new long[m][n];
		    
		    int blocks = in.nextInt();
		    while(blocks-->0){
		        mat[in.nextInt()-1][in.nextInt()-1] = -1l;
		    }
		  //  for(int i=0;i<m;i++) System.out.println(Arrays.toString(mat[i]));
		    if(mat[0][0]==-1 || mat[m-1][n-1]==-1) System.out.println(0);
		    mat[0][0]=1;
		    System.out.println(func(mat,m-1, n-1));
		  //  System.out.println(count);
		    count=0;
		}
	}
}