
Given an undirected graph and an integer M. The task is to determine if the graph can be colored with at most M colors such that no two adjacent vertices of the graph are colored with the same color. Here coloring of a graph means the assignment of colors to all vertices. Print 1 if it is possible to colour vertices and 0 otherwise.

Example 1:
Input:
N = 4
M = 3
E = 5
Edges[] = {(1,2),(2,3),(3,4),(4,1),(1,3)}
Output: 1
Explanation: It is possible to colour the
given graph using 3 colours.

Example 2:
Input:
14
9
5
2 9 13 12 4 1 12 5 12 4
Output:1

// { Driver Code Starts
import java.util.*;
import java.lang.*;
import java.io.*;

class GFG {
    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        int tc = scan.nextInt();

        while (tc-- > 0) {
            int V = scan.nextInt();
            int C = scan.nextInt();
            int E = scan.nextInt();

            List<Integer>[] G = new ArrayList[V];
            for (int i = 0; i < V; i++) {
                G[i] = new ArrayList<>();
            }

            for (int i = 0; i < E; i++) {
                int u = scan.nextInt() - 1;
                int v = scan.nextInt() - 1;
                G[u].add(v);
                G[v].add(u);
            }
            int[] color = new int[V];

            System.out.println(new solve().graphColoring(G, color, 0, C) ? 1 : 0);
        }
    }
}

class solve {
    static boolean allVis(List<Integer> conn, boolean[] v){
        for(Integer ele : conn){
            if(!v[ele]) return false;
        }
        return true;
    }
    
    static boolean graphColor(List<Integer>[] g, 
    int key, int c, int N, int nc,
    int[] color, boolean[] v, boolean[] vSpcl){
        
        for(Integer conn : g[key]) if(color[conn]==c) return false;
        
        color[key]=c;   v[key]=true;    N--;
        
        if(N==0 || allVis(g[key], v)){
            vSpcl = v.clone();
            return true;
        }else{
            for(Integer conn : g[key]){
                if(!v[conn]){
                    for(int co = 1; co<=nc; co++){
                        if(color[conn]==0 && co!=c &&
                        graphColor(g, conn, co, N, nc, color.clone(), v.clone(), vSpcl)){
                            return true;
                        }
                    }
                }
            }
        }
        return false;
    }
    
    public static boolean graphColoring(List<Integer>[] g, int[] color, int x, int c){
        if(c==0 && g.length !=0) return false;
        if(c>=g.length) return true;
        
        int n = g.length;
        boolean[] vSpcl = new boolean[n];
        
        boolean res = true;
        for(int i = 0 ; i < n; i++){
            if(!vSpcl[i]) res = res && graphColor(g, i, 1, g.length, c, color.clone(), new boolean[n], vSpcl);
        }
        return res;
    }
}