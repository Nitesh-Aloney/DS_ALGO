Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.

push(x) -- Push element x onto stack.
pop() -- Removes the element on top of the stack.
top() -- Get the top element.
getMin() -- Retrieve the minimum element in the stack.

Example 1:

Input
["MinStack","push","push","push","getMin","pop","top","getMin"]
[[],[-2],[0],[-3],[],[],[],[]]

Output
[null,null,null,null,-3,null,0,-2]

Input ***
["MinStack","push","push","push","top","pop","getMin","pop","getMin","pop","push","top","getMin","push","top","getMin","pop","getMin"]
[[],[2147483646],[2147483646],[2147483647],[],[],[],[],[],[],[2147483647],[],[],[-2147483648],[],[],[],[]]

Output:
[null,null,null,null,2147483647,null,2147483646,null,2147483646,null,null,2147483647,2147483647,null,-2147483648,-2147483648,null,2147483647]


Explanation
MinStack minStack = new MinStack();
minStack.push(-2);
minStack.push(0);
minStack.push(-3);
minStack.getMin(); // return -3
minStack.pop();
minStack.top();    // return 0
minStack.getMin(); // return -2
 

Constraints:

Methods pop, top and getMin operations will always be called on non-empty stacks.






class MinStack {
    Stack<Integer> s;
    int min;
    
    public MinStack() {
        s = new Stack<>();
        min = Integer.MAX_VALUE;        
    }
    
    public void push(int x) {
        int curMin = Math.min(min, x);
        s.push(curMin);
        s.push(x);
        min = curMin;
    }
    
    public void pop() {
        s.pop();
        s.pop();
        
        if(!s.isEmpty()){        
            int ele = s.pop();
            min = s.peek();
            s.push(ele);
        }
        else min = Integer.MAX_VALUE;
    }
    
    public int top() {
        return s.peek();
    }
    
    public int getMin() {
        return min;
    }
}