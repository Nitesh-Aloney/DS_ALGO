import java.util.*;
class SparseTable{
    private final int[] a;
    private final int[][] dp;
    private final int nil = -1, size;
    SparseTable(ArrayList<Integer> arr){
        size = arr.size();
        this.a = new int[size];
        for(int i=0;i<size;i++) a[i] = arr.get(i);
        this.dp = new int[floorLog(this.a.length)+1][size];
        for(int[] ar : dp) Arrays.fill(ar, nil);
    }
    SparseTable(int[] arr){
        size = arr.length;
        this.a = arr.clone();
        this.dp = new int[floorLog(this.a.length)+1][size];
        for(int[] ar : dp) Arrays.fill(ar, nil);
    }
    private int floorLog(int n){
        return n<2 ? 0 : n==2 ? 1 : 1+floorLog(n>>1);
    }
    private int RMQ(int pow, int start){
        if(dp[pow][start] != nil) return dp[pow][start];
        if(pow==0) return dp[0][start] = start;
        else{
            int leftPart = RMQ(pow-1, start),
                rightPart = RMQ(pow-1, start+(1<<(pow-1)));
            System.out.println(leftPart+"  "+rightPart);
            return dp[pow][start] = (a[leftPart] < a[rightPart]) ? leftPart : rightPart;
        }
    }
    public void show(){
        for(int[] arr : dp) System.out.println(Arrays.toString(arr));
    }
    public void showData(){
        System.out.println(Arrays.toString(this.a));
    }
    public int minQuery(int l, int r){
        if(l > r){int t = l;  l = r;  r = t;}
        int p = floorLog(r-l+1);
        if(r-l+1 > 1<<p){
            int leftPart = RMQ(p, l), rightPart = RMQ(p, r+1-(1<<p));
            if(a[leftPart]<a[rightPart]) return leftPart;
            return rightPart;
        }
        return RMQ(p, l); 
    }
}public class GFG{
    static ArrayList<Integer> euler, depth;
    static Map<Integer, Integer> lastIndex;
    static void eulerTour(Node root,int level){
        if(root==null) return;
        if(root.left!=null){
            euler.add(root.data);
            depth.add(level);
            lastIndex.put(root.data, euler.size()-1);
            eulerTour(root.left, level+1);
        }
        euler.add(root.data);
        depth.add(level);
        lastIndex.put(root.data, euler.size()-1);
        if(root.right!=null){
            eulerTour(root.right, level+1);
            euler.add(root.data);
            depth.add(level);
            lastIndex.put(root.data, euler.size()-1);
        }
    }
    public static void main(String[] args){
        depth = new ArrayList<>();
        euler = new ArrayList<>();
        lastIndex = new HashMap<>();

        Node root = new Node(5);
        root.right = new Node(4);
        root.left = new Node(2);
        root.left.left = new Node(6);
        root.left.right = new Node(9);
        root.right.left = new Node(3);
        root.right.right = new Node(1);
        root.right.left.right = new Node(8);

        eulerTour(root, 0);

        System.out.println("Euler path: "+euler);
        System.out.println("Depth path: "+depth);
        System.out.println("Last time frame: \n"+lastIndex);

        SparseTable table = new SparseTable(depth);
        int res = euler.get(table.minQuery(lastIndex.get(6), lastIndex.get(9)));
        System.out.println(res);


    }
}
class Node{
    int data;
    Node left, right;
    Node(int data){
        this.data = data;
    }
}