Given N points on a 2D plane, your task is to complete the function maxPoints which returns an integer denoting the maximum number of points which lie on the same straight line.

Input:
The first line of input contains an integer T denoting the no of test cases. Then T test cases follow . Each test case contains an integer N denoting the total no of points. And then in the next line are the N space separated values X[i] denoting the X coordinates of the ith point and then in the next line are N space separated values Y[i] denoting the Y coordinates of the ith point.

Output:
For each test case in a new line output will be the count of  maximum number of points that lie on the same straight line.

Constraints:
1<=T<=100
1<=N<=50

Example(To be used only for expected output):
Input:
2
2
1 1
2 2
3
0 0 0
4 5 6
8
24 45 32 45 14 17 34 14
43 0 37 8 26 28 38 34

Output:
2
3
2










// { Driver Code Starts
    import java.util.*;
    class TestClass 
    {
        public static void main(String args[] ) throws Exception 
        {
            Scanner sc = new Scanner(System.in);
            int T = sc.nextInt();
            while(T>0)
            {
            	int N = sc.nextInt();
            	
            	int x[] = new int[N];
       			int y[] = new int[N];
            	for(int i = 0; i < N; i++)
            		x[i] = sc.nextInt();
	for(int i = 0; i < N; i++)
            		y[i] = sc.nextInt();
            	System.out.println(new GfG(). noOfPoints(x,y,N));
            T--;
            }
        }
    }// } Driver Code Ends


class GfG{
    class Pair{
        int x,y;
        Pair(int a, int b){
            if(a==0 && b==0){this.x=0; this.y=0;}
            else if(a==0){ this.x=0; this.y=1;}
            else if(b==0){this.x=1; this.y=0;}
            else{
                int at=a, bt = b;
                while (b%a!=0){  
                    int temp = b;
                    b = b%a;
                    a = temp;
                } 
                this.x = at/b; this.y = bt/b;
            }
        }
        @Override
        public int hashCode(){
            return Integer.parseInt(String.valueOf(this.x)+String.valueOf(this.y));
        }
        public boolean equals(Pair p){
            return this.x==p.x && this.y==p.y;
        }
        public String toString(){
            return "("+this.x+","+this.y+")";
        }
    }
    
    int noOfPoints(int x[],int y[],int n) {
        //You are required to complete this method
        int res = 1;
        Map<Pair, Integer> mp=new HashMap<>();
        for(int i=0;i<n;i++){
            int sres = 1;
            for(int j=i+1;j<n;j++){
                Pair slope = new Pair((x[j]-x[i]),(y[j]-y[i]));
                // System.out.println(i+"  "+j+"  "+slope);
                if(!mp.containsKey(slope)) mp.put(slope,1);
                else{
                    mp.put(slope, mp.get(slope)+1);
                    sres = Math.max(sres, mp.get(slope));
                }
                if(sres == n) return n;
            }
            System.out.println(mp);
            mp.clear();
            res = Math.max(sres, res);
        }
        return res;
   }
}