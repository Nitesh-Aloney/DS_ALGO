The n-queens puzzle is the problem of placing n queens on an n×n chessboard such that no two queens attack each other. Given an integer n, print all distinct solutions to the n-queens puzzle. Each solution contains distinct board configurations of the n-queens’ placement, where the solutions are a permutation of [1,2,3..n] in increasing order, here the number in the ith place denotes that the ith-column queen is placed in the row with that number. For eg below figure represents a chessboard [3 1 4 2].


Input:
The first line of input contains an integer T denoting the no of test cases. Then T test cases follow. Each test case contains an integer n denoting the size of the chessboard.

Output:
For each test case, output your solutions on one line where each solution is enclosed in square brackets '[', ']' separated by a space . The solutions are permutations of {1, 2, 3 …, n} in increasing order where the number in the ith place denotes the ith-column queen is placed in the row with that number, if no solution exists print -1.

Constraints:
1 <= T <= 10
1 <= n <= 10

Example:
Input
2
1
4
Output:
[1 ]
[2 4 1 3 ] [3 1 4 2 ]


import java.util.*;
import java.lang.*;
import java.io.*;

class GFG {
    static boolean[][] attack(boolean[][] board, int x, int y){
        int n = board.length;
        boolean[][] bc = new boolean[n][n];
        for(int i=0;i<n;i++) bc[i]=board[i].clone();
        
        for(int i=0;i<n;i++){
            bc[x][i]=true; bc[i][y]=true;
        }
        
        if(x<=y){
            int l=y-x;
            for(int i=0;i<n;i++){
                if(i+l<n) bc[i][i+l]=true;
                else break;
            }
        }
        else if(y<=x){
            int l=x-y;
            for(int i=0;i<n;i++){
                if(i+l<n) bc[i+l][i]=true;
                else break;
            }
        }
        if(x+y>=n-1){
            int k = x+y-(n-1);
            for(int i=0;i<n;i++){
                if(k+i<n)bc[k+i][n-1-i]=true;
                else break;
            }
        }
        else if(x+y<n){
            for(int i=0;i<n;i++){
                if(x+y-i >=0 )bc[i][x+y-i]=true;
                else break;
            }
        }
        
        bc[x][y]=true;
        // for(int i=0;i<n;i++) System.out.println(Arrays.toString(bc[i]));
        return bc;
    }
    static void NQueens(boolean[][] board, int ql, String s, int row, ArrayList<String> res){
        if(ql==0) res.add(s);
        else{
            for(int i=0;i<board.length;i++){
                if(!board[row][i]){
                    NQueens(attack(board, row, i), ql-1, s+String.valueOf(i+1)+" ", row+1, res);
                }
            }
        }
    }
	public static void main (String[] args) {
		//code
		Scanner in = new Scanner(System.in);
		int test = in.nextInt();
		while(test-- >0){
		    int qLeft = in.nextInt();
		    ArrayList<String> res = new ArrayList<>();
		    NQueens(new boolean[qLeft][qLeft], qLeft, "", 0, res);
		  //  Collections.sort(res);
		    if(res.size()==0) System.out.println(-1);
		    else{
    		    for(String s : res) System.out.print("["+s+"] ");
    		    System.out.println();
		    }
		}
		in.close();
	}
}