Given a chess board of order N x M and source points (s1, s2) and destination points (d1, d2). The task to find minimum number of moves required by the Knight to go to the destination cell.
Note: The chess board consists of rows numbered (1 to N) and columns (1 to M).

Input:
The first line of input contains an integer T denoting the number of testcases. Then T test cases follow. Each test case contains two lines. The first line of each testcase contains two space separated integers N and M. Then in the next line are four space separated values s1, s2 and d1, d2.

Output:
For each testcase in a new line print the minimum number of moves required by the knight to go to the destination from the source. If no such move is possible print -1.

Constraints:
1 <= T <= 100
1 <= N, M <= 25

Example:
Input:
2
4 7
2 6 2 4
7 13
2 8 3 4

Output:
2
3

Explanation:
Testcase 1: One possible move for Knight is from 2, 6 to 4, 5 and then to 2, 4 which is our destination.]


import java.util.*;
import java.lang.*;
import java.io.*;
class Node{
    int x,y,d=Integer.MAX_VALUE;
    Node(int x, int y,int d){
        this.x=x;   this.y=y;   this.d=d;
    }
    public String toString(){
        return "("+this.x+","+this.y+","+this.d+")";
    }
}
class GFG {
	public static void main (String[] args) {
		Scanner in = new Scanner(System.in);
		int t = in.nextInt();
		while(t-- >0){
		    int m = in.nextInt(), n = in.nextInt();
		    int[][] b = new int[m][n];
		    int s1 = in.nextInt()-1, s2 = in.nextInt()-1,
		        d1 = in.nextInt()-1, d2 = in.nextInt()-1;
		        
		    boolean poss = false;
		    if (!(s1<m && s1>=0 && s2<n && s2>=0 && d1<m && d1>=0 && d2<n && d2>=0)) continue;
		  
		    int[] x={ 2, 1, -1, -2, -2, -1, 1, 2 }, y={ 1, 2, 2, 1, -1, -2, -2, -1 };
		    Queue<Node> q = new LinkedList<Node>();
		    q.add(new Node(s1,s2,0));
		    while(!q.isEmpty()){
		        Node p = q.remove();
		        if(p.x==d1 && p.y==d2){
		            System.out.println(p.d);
		            poss=true;
		            break;
		        }
		        b[p.x][p.y]=1;
		        for(int i=0;i<8;i++){
		            int k=x[i]+p.x, l=y[i]+p.y;
		            if(k==d1&&l==d2){
		                System.out.println(p.d+1);
    		            poss=true;
    		            break;
		            }
		            if(k<m && k>=0 && l>=0 && l<n && b[k][l]==0){
		                q.add(new Node(k,l,1+p.d));
		            }
		        }
		        if(poss) break;
		    }
		    if(!poss) System.out.println(-1);
		}
		in.close();
	}
}