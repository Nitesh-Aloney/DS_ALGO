564. Find the Closest Palindrome

Given an integer n, find the closest integer (not including itself), which is a palindrome.

The 'closest' is defined as absolute difference minimized between two integers.

Example 1:
Input: "123"
Output: "121"
Note:
The input n is a positive integer represented by string, whose length will not exceed 18.
If there is a tie, return the smaller one as answer.


class Solution {
    boolean isPalin(char[] ch){
        for(int i=0;i<ch.length/2;i++) if(ch[i]!=ch[ch.length-1-i]) return false;
        return true;
    }
    public String nearestPalindromic(String str){
        int i=0;
        while(i<str.length() && str.charAt(i)=='0') i++;
        if(i==str.length()) return "-1";
        
        char[] ch = str.substring(i).toCharArray();
        if(String.valueOf(ch).equals("9")) return "8";
        
        if(ch.length==1){
            ch[0]--;
            return String.valueOf(ch);
        }
        
        i=0;
        while(i<ch.length && ch[i]=='9') i++;
        if(i==ch.length){
            String res = "1";
            while(i-->1) res+='0';
            res+='1';
            return res;            
        }
        
        i=0;
        if(ch[i++]=='1') while(i<ch.length-1 && ch[i]=='0') i++;
        if(i==ch.length-1 && (ch[i]=='1' || ch[i]=='0')){
            i++;
            String res = "";
            while(i-->1) res+='9';
            return res;            
        }
        
        
        if(isPalin(ch)){
            int inc = ch[ch.length/2] == '0' ? 1 : -1;
            if(ch.length%2==0){
                ch[ch.length/2]+=inc;
                ch[ch.length/2-1]+=inc;
            }else ch[ch.length/2]+=inc;
            return String.valueOf(ch);
        }
         
        char[] pos1 = ch.clone();
        long given = Long.parseLong(String.valueOf(ch));
        
        for(i=0;i<ch.length/2;i++) pos1[pos1.length-1-i]=pos1[i];
        String res = String.valueOf(pos1);
        long num_res = Long.parseLong(res);
        
        pos1 = ch.clone();
        if(pos1[(pos1.length-1)/2]<'9'){
            pos1[(pos1.length-1)/2]++;
            for(i=0;i<ch.length/2;i++) pos1[pos1.length-1-i]=pos1[i];
            String temp = String.valueOf(pos1);
            long t = Long.parseLong(temp);
            if(Math.abs(given-num_res) > Math.abs(given-t)){
                res = temp;
                num_res = t;
            }else if(Math.abs(given-num_res) == Math.abs(given-t)){
                if(t<num_res){ num_res = t; res = temp; }
            }
        }
        pos1 = ch.clone();
        if(pos1[(pos1.length-1)/2]>'0'){
            pos1[(pos1.length-1)/2]--;
            for(i=0;i<ch.length/2;i++) pos1[pos1.length-1-i]=pos1[i];
            String temp = String.valueOf(pos1);
            long t = Long.parseLong(temp);
            if(Math.abs(given-num_res) > Math.abs(given-t)){
                res = temp;
                num_res = t;
            }else if(Math.abs(given-num_res) == Math.abs(given-t)){
                if(t<num_res){ num_res = t; res = temp; }
            }
        }
        return res;
    }
}