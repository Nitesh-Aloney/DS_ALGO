Given an array of size N. The task is to sort the array elements by completing functions heapify() and buildHeap() which are used to implement Heap Sort.

Example 1:

Input:
N = 5
arr[] = {4,1,3,9,7}
Output:
1 3 4 7 9
Explanation:
After sorting elements
using heap sort, elements will be
in order as 1,3,4,7,9.
Example 2:

Input:
N = 10
arr[] = {10,9,8,7,6,5,4,3,2,1}
Output:
1 2 3 4 5 6 7 8 9 10
Explanation:
After sorting elements
using heap sort, elements will be
in order as 1, 2,3,4,5,6,7,8,9,10.

70
841 527 506 486 743 876 445 276 879 706 885 672 677 727 474 286 594 347 953 432 977 137 130 247 789 515 570 287 205 538 709 398 417 215 884 512 91 681 140 322 740 26 346 417 
105 821 55 700 168 9 484 498 498 614 745 288 481 316 927 38 206 636 788 975 203 24 487 646 57 628
[9, 24, 26, 38, 55, 57, 91, 105, 130, 137, 140, 168, 203, 205, 206, 215, 247, 276, 286, 287, 288, 316, 322, 346, 347, 398, 417, 417, 432, 445, 474, 481, 484, 486, 487, 498, 498, 506, 512, 515, 527, 538, 570, 594, 614, 628, 636, 646, 672, 677, 681, 700, 706, 709, 727, 740, 743, 745, 788, 789, 821, 841, 876, 879, 884, 885, 927, 953, 975, 977]      

Your Task :
Complete the functions heapify() and buildheap().

Expected Time Complexity: O(N * Log(N)).
Expected Auxiliary Space: O(1).

Constraints:
1 <= N <= 106
1 <= arr[i] <= 106




import java.util.*;
class Heap_Sort
{
    void printArray(int arr[],int n)
    {
        for (int i=0; i<n; ++i)
            System.out.print(arr[i]+" ");
        System.out.println();
    }
    public static void main(String args[])
    {
        Scanner sc  = new Scanner(System.in);
        Heap_Sort hs = new Heap_Sort();
        int arr[] = new int[1000000];
        int T = sc.nextInt();
        while(T>0)
        {
            int n = sc.nextInt();
            for(int i=0;i<n;i++)
                arr[i] = sc.nextInt();
            hs.heapSort(arr,n);
            hs.printArray(arr,n);
            T--;
        }
    }
    public void heapSort(int arr[], int n)
    {
        GfG g = new GfG();
        g.buildHeap(arr, n);
        for (int i=n-1; i>=0; i--)
        {
            int temp = arr[0];
            arr[0] = arr[i];
            arr[i] = temp;
            g.heapify(arr, i, 0);
        }
    }
}


class GfG
{
    void heapify(int[] a, int max, int i){
        int lar = i, l = 2*i+1, r = 2*i+2;
        if(l<max && a[l]>a[lar]) lar=l;
        if(r<max && a[r]>a[lar]) lar=r;
        if(lar!=i){
            int temp = a[lar];  a[lar] = a[i]; a[i] = temp;
            heapify(a, max, lar);
        }
    }    
    void buildHeap(int a[], int n){
        int ind = n/2-1;
        for(int i = ind;i>=0;i--) heapify(a, a.length, i);
    }
 }
 
 