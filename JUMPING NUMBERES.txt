
 

Example 1:

Input:
X = 10
Output:
10
Explanation:
10 is the largest Jumping Number
possible for X = 10.
Example 2:

Input:
X = 50
Output:
45
Explanation:
45 is the largest Jumping Number
possible for X = 50.
 

Your Task:
You don't need to read input or print anything. Your task is to complete the function jumpingNums() which takes an Integer X as input and returns the largest Jumping Number less than or equal to X.

 

Expected Time Complexity: O(k), where k is no of jumping numbers
Expected Auxiliary Space: O(k), where k is no of jumping numbers

 

Constraints:
1 <= X <= 109

// { Driver Code Starts
//Initial Template for Java

import java.io.*;
import java.util.*;

class GFG {
    public static void main(String args[]) throws IOException {
        BufferedReader read =
            new BufferedReader(new InputStreamReader(System.in));
        int t = Integer.parseInt(read.readLine());
        while (t-- > 0) {
            long X = Long.parseLong(read.readLine());

            Solution ob = new Solution();
            System.out.println(ob.jumpingNums(X));
        }
    }
}// } Driver Code Ends


//User function Template for Java

class Solution {
    static long jumpingNums(long X) {
        if(X<=10l) return X;
        Queue<Long> q = new LinkedList<>();
        int i=1;
        for(;i<10;i++){
            q.add((long)i);
        }
        long res = 0;
        while(q.peek() <= X){
            Long ele = q.remove();
            res = ele;
            long rem = ele%10;
            if(rem>0) q.add(ele*10+(rem-1));
            if(rem<9) q.add(ele*10+(rem+1));
        }
        return res;
    }
};
