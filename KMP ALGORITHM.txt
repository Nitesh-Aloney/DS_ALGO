Given two strings, one is a text string and other is a pattern string. The task is to print the indexes of all the occurences of pattern string in the text string. For printing, Starting Index of a string should be taken as 1.

Example 1:

Input:
S = "batmanandrobinarebat", pat = "bat"
Output: 1 18
Explanation: The string "bat" occurs twice
in S, one starts are index 1 and the other
at index 18. 
â€‹Example 2:

Input: 
S = "abesdu", pat = "edu"
Output: -1
Explanation: There's not substring "edu"
present in S.

Your Task:
You don't need to read input or print anything. Your task is to complete the function search() which takes the string S and the string pat as inputs and returns an array denoting the start indices (1-based) of substring pat in the string S. 


Expected Time Complexity: O(|S|).
Expected Auxiliary Space: O(|S|).


Constraints:
1<=|S|<=105
1<=|pat|<|S|


class Solution
{
    ArrayList<Integer> search(String pat, String str){
        int[] lps = new int[pat.length()];
        ArrayList<Integer> res = new ArrayList<>();
        int i=0, j=1;
        while(j<pat.length()){
            if(pat.charAt(i)==pat.charAt(j)){
                i++;
                lps[j]=i;
                j++;
            }else{
                if(i==0){
                    lps[j]=0;
                    j++;
                }else i = lps[i-1];
            }
        }
        i = 0;
        j = 0;
        while (i < str.length()) {
            if(str.charAt(i) == pat.charAt(j)) {
                i++; j++;
            }else{
                if(j == 0) i++;
                else j = j==0?0:lps[j-1];
            }
            if(j == pat.length()) {
                res.add(i-j+1);
                j=lps[j-1];
            }
        }
        if(res.size()==0) res.add(-1);
        return res;
    }
}