You are given an array A[] of size N. Find the total count of sub-arrays having their sum equal to 0.

Example 1:

Input:
N = 6
A[] = {0,0,5,5,0,0}
Output: 6
Explanation: The 6 subarrays are 
[0], [0], [0], [0], [0,0], and [0,0].

Example 2:

Input:
N = 10
A[] = {6,-1,-3,4,-2,2,4,6,-12,-7}
Output: 4
Explanation: The 4 subarrays are [-1 -3 4]
[-2 2], [2 4 6 -12], and [-1 -3 4 -2 2]

Your Task:
You don't need to read input or print anything. Complete the function findSubarray() that takes the array A and its size N as input parameters and returns the total number of sub-arrays with 0 sum. 
 

Expected Time Complexity : O(N)
Expected Auxilliary Space : O(N)
 

Constraints:    
1<= N <= 107
-1010 <= Ai <= 1010



/*package whatever //do not write package name here */

import java.io.*;
import java.util.*;
class GFG {
	public static void main (String[] args) {
		Scanner sc=new Scanner(System.in);
		int t=sc.nextInt();
		sc.nextLine();
		while(t-->0)
		{
		    int n;
		    n=sc.nextInt();
		    
		    int arr[]=new int[n];
	
		    
		    for(int i=0;i<n;i++)
		    {
		        arr[i]=sc.nextInt();
		    }

		    System.out.println(findSubarray(arr,n));
		}
		
	}

 // } Driver Code Ends


//User function Template for Java

public static int findSubarray(int[] a ,int n){
    Map<Integer, Integer> rec = new HashMap<>();
    int zeroes = 0, sum = 0, ans = 0;
    for(int i=0;i<n;i++){
        if(a[i]==0)zeroes++;
        sum+=a[i];
        if(sum==0) ans++;
        rec.put(sum, rec.getOrDefault(sum, 0)+1);
    }
    for(Map.Entry<Integer, Integer> e : rec.entrySet()){
        int v = e.getValue();
        if(v>=2) ans += v*(v-1)/2;
    }
    return ans;
}
    



// { Driver Code Starts.


}
  // } Driver Code Ends