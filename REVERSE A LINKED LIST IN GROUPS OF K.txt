import java.util.*;

public class GFG {
    static class Node{
        int data=0;
        Node next = null;
        Node(int data){
            this.data = data; 
        }
        void add(int ele){
            Node ptr = this;
            while(ptr!=null && ptr.next!=null){
                ptr = ptr.next;
            }
            ptr.next = new Node(ele);
        }
        void show(){
            Node ptr = this;
            while(ptr!=null){
                System.out.print(ptr.data+" ");
                ptr = ptr.next;
            }System.out.println();
        }
    }
    static void solve(){
        Node head = new Node(0);
        Random rand = new Random();
        for(int i=0;i<8;i++) head.add(rand.nextInt(8));
        head.show();
        Node ptr = head;
        int k = 4;
        Node newHead = null, prev=null;
        while(ptr!=null){
            Node rev = null, last = null;
            int t = k;
            while(t-->0 && ptr!=null){
                Node n = ptr;
                if(last == null) last = n;
                ptr = ptr.next;
                n.next = rev;
                rev = n;
            }
            if(prev!=null) prev.next = rev;
            if(newHead==null) newHead=rev;
            prev = last;
        }
        newHead.show();
    }
    public static void main(String[] args){
        solve();
    }
}








// reverse linkedlist in groups of k
import java.util.*;

class Node{
    int data;
    Node next;
    Node(int ele){
        this.data = ele;
    }
}
public class GFG {

    static class Pair{
        Node start,end;
        Pair(Node start, Node end){
            this.start = start; this.end = end;
        }
        public String toString(){
            return "("+start.data+","+end.data+")";
        }
    }
    static Node add(Node head, int ele){
        if(head==null) return new Node(ele);
        head.next = add(head.next, ele);
        return head;
    }
    static void dis(Node head){
        while(head!=null){
            System.out.print(head.data+" ");
            head = head.next;
        }System.out.println();
    }
    public static void main(String[] args){
        int[] a = {6,3,8,10,7,4,5,2,1,9};
        Node head = null;
        for(int ele:a){
            head = add(head, ele);
        }
        dis(head);
        Node ptr = head;
        Pair[] ref = new Pair[100];
        int k=4,i=0;
        while(ptr!=null){
            Node temp = ptr;
            int count = k;
            while(count-->1 && ptr!=null && ptr.next!=null){
                ptr = ptr.next;
            }
            ref[i++] = new Pair(temp, ptr);
            if(ptr!=null){
                temp = ptr.next;
                ptr.next = null;
                ptr = temp;
            }
        }
        int length = i--;
        int j=i;
        i=0;
        while(i<j){
            Pair temp = ref[i];
            ref[i] = ref[j];
            ref[j] = temp;
            i++; j--;
        }
        
        head = ref[0].start;
        i = 0;
        while(ref[i]!=null && ref[i+1]!=null){
            if(ref[i].end == null) break;
            ref[i].end.next = ref[i+1].start;
            i++;
        }
        dis(head);
    }
}










//Constant Space Solution
import java.util.*;

class Node{
    int data;
    Node next;
    Node(int data){
        this.data = data;
    }
    public void add(Node node){
        Node ptr = this;
        while(ptr!=null && ptr.next!=null){
            ptr = ptr.next;
        }
        ptr.next = node;
    }
    public void show(){        
        Node ptr = this;
        while(ptr!=null){
            System.out.print(ptr.data+" ");
            ptr = ptr.next;
        }System.out.println();
    }
}
public class GFG{
    static Node reverseInGroupsOfK(Node head, int group){
        System.out.println("Group Size: "+group);
        Node ptr = head, prev = null, newHead = null;
        while(group!=0 && ptr!=null){
            int k = group;
            Node rev = null, first = null, last = null;
            while(k-->0 && ptr!=null){
                if(first==null) first=ptr;
                if(k==0 || ptr.next==null) last = ptr;
                Node t = ptr;
                ptr = ptr.next;
                t.next = rev;
                rev = t;
            }
            if(first!=null) first.next = ptr;
            if(newHead == null) newHead = rev;
            if(prev!=null) prev.next = rev;
            prev = first;
        }
        if(newHead == null) newHead = head;
        return newHead;
    }
    public static void main(String[] args){
        Random rand = new Random();
        Node head = new Node(rand.nextInt(20));
        int group = rand.nextInt(10), size = rand.nextInt(20);
        for(int i=0;i<size-1;i++){
            head.add(new Node(rand.nextInt(50)));
        }
        head.show();
        reverseInGroupsOfK(head, group).show();
    }
}