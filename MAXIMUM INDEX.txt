Given an array Arr[] of N positive integers. The task is to find the maximum of j - i subjected to the constraint of Arr[i] <= Arr[j].

Example 1:

Input:
N = 9
Arr[] = {34, 8, 10, 3, 2, 80, 30, 33, 1}
Output: 6
Explanation: In the given array Arr[1] <
Arr[7]  satisfying the required condition
(Arr[i] <= Arr[j])  thus giving the
maximum difference of j - i which is
6(7-1).

Your Task:
Complete the function maxIndexDiff() which takes array arr and size n, as input parameters and returns an integer representing the answer. You don't to print answer or take inputs. 

Expected Time Complexity: O(N)
Expected Auxiliary Space: O(N)

Constraints:
1 ≤ N ≤ 103
0 ≤ Arr[i] ≤ 1018



// { Driver Code Starts
import java.io.*;
import java.util.*;

class GFG {
    public static void main(String[] args) throws IOException {
        BufferedReader br =
            new BufferedReader(new InputStreamReader(System.in));
        int t =
            Integer.parseInt(br.readLine().trim()); // Inputting the testcases
        while (t-- > 0) {
            int n = Integer.parseInt(br.readLine().trim());
            int arr[] = new int[n];
            String inputLine[] = br.readLine().trim().split(" ");
            for (int i = 0; i < n; i++) {
                arr[i] = Integer.parseInt(inputLine[i]);
            }
            System.out.println(new Solution().maxIndexDiff(arr, n));
        }
    }
}// } Driver Code Ends


class Solution {

    int maxIndexDiff(int a[], int n){
        int[] l = new int[n], r = new int[n];
        int i=0, j=0, res=0;
        l[0] = a[0];    r[n-1] = a[n-1];
        for(i=1;i<n;i++){
            j = n-i-1;
            l[i] = Math.min(a[i], l[i-1]);
            r[j] = Math.max(a[j], r[j+1]);
        }
        i=0;    j=0;
        while(j<n && i<n){
            if(l[i]<=r[j]){
                res = Math.max(j-i, res);
                j++;
            }
            else i++;
        }
        return res;
    }
}