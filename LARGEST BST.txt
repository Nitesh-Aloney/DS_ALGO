
import java.io.*;
import java.util.*;
import java.math.*;

class Node  
{ 
    int data; 
    Node left, right; 
   
    public Node(int d)  
    { 
        data = d; 
        left = right = null; 
    } 
}

class GFG
{
    static Node buildTree(String str)
    {
        // Corner Case
        if(str.length() == 0 || str.equals('N'))
            return null;
        String[] s = str.split(" ");
        
        Node root = new Node(Integer.parseInt(s[0]));
        Queue <Node> q = new LinkedList<Node>();
        q.add(root);
        
        // Starting from the second element
        int i = 1;
        while(!q.isEmpty() && i < s.length)
        {
              // Get and remove the front of the queue
              Node currNode = q.remove();
        
              // Get the curr node's value from the string
              String currVal = s[i];
        
              // If the left child is not null
              if(!currVal.equals("N")) 
              {
        
                  // Create the left child for the curr node
                  currNode.left = new Node(Integer.parseInt(currVal));
        
                  // Push it to the queue
                  q.add(currNode.left);
              }
        
              // For the right child
              i++;
              if(i >= s.length)
                  break;
              currVal = s[i];
        
              // If the right child is not null
              if(!currVal.equals("N")) 
              {
        
                  // Create the right child for the curr node
                  currNode.right = new Node(Integer.parseInt(currVal));
        
                  // Push it to the queue
                  q.add(currNode.right);
              }
              
              i++;
        }
    
        return root;
    }
    
    public static void main(String args[]) throws IOException {
    
       BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int t = Integer.parseInt(br.readLine().trim());
        while(t>0)
        {
            String s = br.readLine();
            Node root = buildTree(s);
            
            Solution T = new Solution();
            System.out.println(T.largestBst(root));
            
            t--;
        }
    }
}
class Solution{
    static int max;
    static int isBST(Node root, int mn, int mx){
        if(root==null) return 0;
        if(root.data>=mn && root.data<=mx){
            int left = isBST(root.left, mn, root.data-1);
            if(left==-1) return -1;
            int right = isBST(root.right, root.data+1, mx);
            if(right==-1) return -1;
            return 1+left+right;
        }
        return -1;
    }
    static void inOrder(Node root){
        if(root==null) return;
        int res = isBST(root, Integer.MIN_VALUE, Integer.MAX_VALUE);
        max = Math.max(res, max);
        // System.out.print("\nmax: "+max);
        inOrder(root.left);
        inOrder(root.right);
    }
    static int largestBst(Node root){
        if(root==null) return 0;
        max = 0;
        inOrder(root);
        return max;
    }
    
}