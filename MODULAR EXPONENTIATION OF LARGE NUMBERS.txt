Implement pow(x, n) % M.
In other words, given x, n and M, find (xn) % M. 

Example 1:

Input: 3 2 4
Output: 1
Example 2:

Input: 10 9 6
Output: 4
 

Your Task:
You don't need to read or print anything. Your task is to complete the function PowMod() which takes the x, n and M as input parameters and returns xn % M.
 

Expected Time Complexity: O(log(n))
Expected Space Complexity: O(1)




import java.util.*;
import java.lang.*;
import java.io.*;
class GFG
{
    public static void main(String[] args) throws IOException
    {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int T = Integer.parseInt(br.readLine().trim());
        while(T-->0)
        {
            String s = br.readLine();
            String[] S = s.split(" ");
            long x = Long.parseLong(S[0]);
            long x = Long.parseLong(S[1]);
            long x = Long.parseLong(S[2]);
            Solution ob = new Solution();
            long ans = ob.PowMod(x, n, m);
            System.out.println(ans);
        }
    }
}
// } Driver Code Ends


//User function Template for Java

class Solution
{
    public long PowMod(long x, long n, long m)
    {
        int x = x%m;
        if(x==1 || n==1) return x;
        if(n==0) return 1;
        if(x==0) return 0;
        
        int subRes = PowMod(x, n/2, m);
        if(n&1==1) return x*subRes*subRes;
        else return subRes*subRes;
    }
}