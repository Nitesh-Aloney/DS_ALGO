class SparseTable{
    private final int[] a;
    private final int[][] dp;
    private final int nil = -1, size;
    SparseTable(ArrayList<Integer> arr){
        size = arr.size();
        this.a = new int[size];
        for(int i=0;i<size;i++) a[i] = arr.get(i);
        this.dp = new int[floorLog(this.a.length)+1][size];
        for(int[] ar : dp) Arrays.fill(ar, nil);
    }
    SparseTable(int[] arr){
        size = arr.length;
        this.a = arr.clone();
        this.dp = new int[floorLog(this.a.length)+1][size];
        for(int[] ar : dp) Arrays.fill(ar, nil);
    }
    private int floorLog(int n){
        return n<2 ? 0 : n==2 ? 1 : 1+floorLog(n>>1);
    }
    private int RMQ(int pow, int start){
        if(dp[pow][start] != nil) return dp[pow][start];
        if(pow==0) return dp[0][start] = start;
        else{
            int leftPart = RMQ(pow-1, start),
                rightPart = RMQ(pow-1, start+(1<<(pow-1)));
            System.out.println(leftPart+"  "+rightPart);
            return dp[pow][start] = (a[leftPart] < a[rightPart]) ? leftPart : rightPart;
        }
    }
    public void show(){
        for(int[] arr : dp) System.out.println(Arrays.toString(arr));
    }
    public void showData(){
        System.out.println(Arrays.toString(this.a));
    }
    public int minQuery(int l, int r){
        if(l > r){int t = l;  l = r;  r = t;}
        int p = floorLog(r-l+1);
        if(r-l+1 > 1<<p){
            int leftPart = RMQ(p, l), rightPart = RMQ(p, r+1-(1<<p));
            if(a[leftPart]<a[rightPart]) return leftPart;
            return rightPart;
        }
        return RMQ(p, l); 
    }
}