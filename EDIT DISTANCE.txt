Given two strings s and t. Find the minimum number of operations that need to be performed on str1 to convert it to str2. The possible operations are:

Insert
Remove
Replace
 

Example 1:

Input: 
s = "geek", t = "gesek"
Output: 1
Explanation: One operation is required 
inserting 's' between two 'e's of str1.

Example 2:

Input : 
s = "gfg", t = "gfg"
Output: 
0
Explanation: Both strings are same.
 

Your Task:
You don't need to read or print anything. Your task is to complete the function editDistance() which takes strings s and t as input parameters and returns the minimum number of operation required to make both strings equal. 

 

Expected Time Complexity: O(n2)
Expected Space Complexity: O(n2)






import java.util.*;
import java.lang.*;
import java.io.*;
class GFG
{
    public static void main(String[] args) throws IOException
    {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int T = Integer.parseInt(br.readLine().trim());
        while(T-->0)
        {
            String s1 = br.readLine();
            String[] S = s1.split(" ");
            String s = S[0];
            String t = S[1];
            Solution ob = new Solution();
            int ans = ob.editDistance(s, t);
            System.out.println(ans);
        }
    }
}
// } Driver Code Ends


class Solution
{
    public int editDistance(String s, String t)
    {
        int sl = s.length(), tl = t.length();
        int[][] rec = new int[sl+1][tl+1];
        for(int i=0;i<=sl;i++) rec[i][0] = i;
        for(int i=0;i<=tl;i++) rec[0][i] = i;
        for(int i=1;i<=sl;i++){
            for(int j=1;j<=tl;j++){
                if(s.charAt(i-1)==t.charAt(j-1)) rec[i][j]=rec[i-1][j-1];
                else rec[i][j] = 1+Math.min(rec[i-1][j-1],Math.min(rec[i-1][j], rec[i][j-1]));
            }
        }
        // for(int i=0;i<=sl;i++) System.out.println(Arrays.toString(rec[i]));
        return rec[sl][tl];
    }
}