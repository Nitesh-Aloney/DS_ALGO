Two player X and Y are playing a game in which there are pots of gold arranged in a  line, each containing some gold coins. They get alternating turns in which the player can pick a pot from one of the ends of the line. The winner is the player who has a higher number of coins at the end. The objective is to maximize the number of coins collected by X, assuming Y also plays optimally. You are required to complete the method maxCoins which returns an integer denoting the max coins X could get while playing the game. You may assume that X starts the game. 

Input:
The first line of input contains an integer T denoting the no of test cases. Then T test cases follow. Each test case contains an integer denoting the no of gold pots. Then in the next line are N space separated values denoting the values (A[]) of gold coins in each pot.

Output:
For each test case in a new line print the maximum amount of money X can collect.

Constraints:
1<=T<=100
1<=N<=100
1<=A[]<=1000

Example(To be used only for expected output):
Input:
2
4
8 15 3 7
4
2 2 2 2



import java.util.*;
import java.lang.Math;
class Pots{
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		int t = sc.nextInt();
		while(t-- > 0)
		{
			int n = sc.nextInt();
			int[] a =new  int[n];
			for(int i=0;i<n;i++)
			{
				a[i] = sc.nextInt();
			}
			GfG g = new GfG();
			System.out.println(g.maxCoins(a,n));
			
		}
	}
}// } Driver Code Ends


/*Complete the function below*/
class GfG
{
	public static int maxCoins(int a[],int n)
	{
	    int[][] x = new int[n][n], y = new int[n][n];
	    for(int i=0;i<n;i++) x[i][i]=a[i];
	    for(int i=1;i<n;i++){
	        for(int j=0;j<n-i;j++){
	            int k = j+i;
	            x[j][k]=Math.max(y[j][k-1]+a[k], y[j+1][k]+a[j]);
	            y[j][k]=Math.min(x[j][k-1], x[j+1][k]);
	        }
	    }
	   return x[0][n-1];
    }
}