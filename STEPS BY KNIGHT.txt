// { Driver Code Starts
// Initial Template for Java

import java.io.*;
import java.util.*;

class FastReader {
    BufferedReader br;
    StringTokenizer st;

    public FastReader() { br = new BufferedReader(new InputStreamReader(System.in)); }

    String next() {
        while (st == null || !st.hasMoreElements()) {
            try {
                st = new StringTokenizer(br.readLine());
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        return st.nextToken();
    }

    int nextInt() { return Integer.parseInt(next()); }

    long nextLong() { return Long.parseLong(next()); }

    double nextDouble() { return Double.parseDouble(next()); }

    String nextLine() {
        String str = "";
        try {
            str = br.readLine();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return str;
    }
}

class GFG {
    public static void main(String[] args) {

        FastReader sc = new FastReader();
        int t = sc.nextInt();
        while (t > 0) {
            int n = sc.nextInt();
            ;
            int knightpos[] = new int[2];
            knightpos[0] = sc.nextInt();
            ;
            knightpos[1] = sc.nextInt();
            ;
            int targetpos[] = new int[2];
            targetpos[0] = sc.nextInt();
            ;
            targetpos[1] = sc.nextInt();

            Solution T = new Solution();
            System.out.println(T.minStepToReachTarget(knightpos, targetpos, n));
            t--;
        }
    }
}
// } Driver Code Ends


// User function Template for Java
class Node{
    int x,y,d;
    Node(int x, int y, int d){
        this.x = x;
        this.y = y;
        this.d = d;
    }
    @Override
    public String toString(){
        return "("+this.x+","+this.y+","+this.d+")";
    }
}
class Solution {
    public int minStep(int[][] chs, int x, int y, int d1, int d2, int n){
        // System.out.println(x+","+y+" -- "+d1+","+d2);
        int[] r = {-2, -2, 1, -1, 2, 2, 1, -1}, c = {-1, 1, 2, 2, -1, 1, -2, -2};
        if(x==d1 && y== d2) return 0;
        Queue<Node> q = new LinkedList<>();
        q.add(new Node(x, y, 0));
        while(!q.isEmpty()){
            // System.out.println(q);
            Node cu = q.remove();
            for(int i = 0; i < 8; i++){
                int k =cu.x+r[i], l = cu.y+c[i], d= cu.d+1;
                if(k>=0 && k<n && l>=0 && l<n && chs[k][l]==0){
                    chs[k][l] = 1;
                    if(k==d1 && l==d2) return cu.d+1;
                    q.add(new Node(k,l,d));
                }
            }
        }
        return -1;
    }
    // KnightPos : knight position coordinates
    // targetPos : target position coordinated
    // N : square matrix size
    public int minStepToReachTarget(int kp[], int t[], int N) {
        // Write your code here
        int[][] chs = new int[N][N];
        return minStep(chs, kp[0]-1 , kp[1]-1, t[0]-1, t[1]-1, N);
    }
}
