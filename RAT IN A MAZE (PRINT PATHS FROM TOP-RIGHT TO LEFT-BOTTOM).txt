Consider a rat placed at (0, 0) in a square matrix of order N*N. It has to reach the destination at (N-1, N-1). Find all possible paths that the rat can take to reach from source to destination. The directions in which the rat can move are 'U'(up), 'D'(down), 'L' (left), 'R' (right). Value 0 at a cell in the matrix represents that it is blocked and cannot be crossed while value 1 at a cell in the matrix represents that it can be traveled through.

Example 1:

Input: N = 4, m[][] = {{1, 0, 0, 0},
                       {1, 1, 0, 1}, 
                       {1, 1, 0, 0},
                       {0, 1, 1, 1}}
Output: DDRDRR DRDDRR
Explanation: The rat can reach the 
destination at (3, 3) from (0, 0) by two 
paths ie DRDDRR and DDRDRR when printed 
in sorted order we get DDRDRR DRDDRR.
Example 2:
Input: N = 2, m[][] = {{1, 0},
                       {1, 0}}
Output: -1
Explanation: No path exits



import java.util.*;
class Rat {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();

        while (t-- > 0) {
            int n = sc.nextInt();
            int[][] a = new int[n][n];
            for (int i = 0; i < n; i++)
                for (int j = 0; j < n; j++) a[i][j] = sc.nextInt();

            GfG g = new GfG();
            ArrayList<String> res = g.printPath(a, n);
            if (res.size() > 0) {
                for (int i = 0; i < res.size(); i++)
                    System.out.print(res.get(i) + " ");
                System.out.println();
            } else {
                System.out.println(-1);
            }
        }
    }
}
// } Driver Code Ends


// User function Template for Java

// m is the given matrix and n is the order of matrix
class GfG {
    static ArrayList<String> res = new ArrayList<>();
    static int[] x = {0,1,0,-1}, y = {1,0,-1,0};
    static String[] path = {"R","D","L","U"};
    
    static int[][] copy(int[][] a){
        int n=a.length;
        int[][] temp = new int[n][n];
        for(int i=0;i<n;i++) for(int j=0;j<n;j++) temp[i][j]=a[i][j];
        return temp;
    }
    
    static void possiblePaths(int[][] m, int i, int j, int n, String s){
        if(m[i][j]!=1) return;
        if(i==n-1 && j==n-1){
            res.add(s); return;
        }
        else{
            m[i][j]=0;
            for(int t=0;t<4;t++){
                int r = i+x[t], c = j+y[t];
                if(r>=0 && c>=0 && r<n && c<n && m[r][c]==1){
                    possiblePaths(copy(m),r,c,n,s+path[t]);
                }
            }
        }
    }
    
    public static ArrayList<String> printPath(int[][] m, int n) {
        // Your code here
        // for(int i=0;i<n;i++) System.out.println(Arrays.toString(m[i]));
        possiblePaths(m, 0, 0, n, "");
        Collections.sort(res);
        ArrayList<String> temp = new ArrayList<>(res);
        res.clear();
        return temp;
    }
}