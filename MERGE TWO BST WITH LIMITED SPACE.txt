Given two BSTs, return elements of both BSTs in sorted form.

Example 1:

Input:
BST1:
       5
     /   \
    3     6
   / \
  2   4  
BST2:
        2
      /   \
     1     3
            \
             7
            /
           6
Output: 1 2 2 3 3 4 5 6 6 7
Explanation: 
After merging and sorting the
two BST we get 1 2 2 3 3 4 5 6 6 7.
Example 2:

Input:
BST1:
       12
     /   
    9
   / \    
  6   11
    
BST2:
      8
    /  \
   5    10
  /
 2
Output: 2 5 6 8 9 10 11 12
Explanation: 
After merging and sorting the
two BST we get 2 5 6 8 9 10 11 12.
Your Task:
You don't need to read input or print anything. Your task is to complete the function merge() which takes roots of both the BSTs as its input and returns an array of integers denoting the node values of both the BSTs in a sorted order.

Expected Time Complexity: O(M+N) where M and N are the sizes if the two BSTs.
Expected Auxiliary Space: O(Height of BST1 + Height of BST2).

Constraints:
1 <= Number of Nodes <= 100000


import java.io.*;
import java.util.*;
import java.math.*;

class Node  
{ 
    int data; 
    Node left, right; 
   
    public Node(int d)  
    { 
        data = d; 
        left = right = null; 
    } 
}

class GFG
{
    static Node buildTree(String str)
    {
        // Corner Case
        if(str.length() == 0 || str.equals('N'))
            return null;
        String[] s = str.split(" ");
        
        Node root = new Node(Integer.parseInt(s[0]));
        Queue <Node> q = new LinkedList<Node>();
        q.add(root);
        
        // Starting from the second element
        int i = 1;
        while(!q.isEmpty() && i < s.length)
        {
              // Get and remove the front of the queue
              Node currNode = q.remove();
        
              // Get the curr node's value from the string
              String currVal = s[i];
        
              // If the left child is not null
              if(!currVal.equals("N")) 
              {
        
                  // Create the left child for the curr node
                  currNode.left = new Node(Integer.parseInt(currVal));
        
                  // Push it to the queue
                  q.add(currNode.left);
              }
        
              // For the right child
              i++;
              if(i >= s.length)
                  break;
              currVal = s[i];
        
              // If the right child is not null
              if(!currVal.equals("N")) 
              {
        
                  // Create the right child for the curr node
                  currNode.right = new Node(Integer.parseInt(currVal));
        
                  // Push it to the queue
                  q.add(currNode.right);
              }
              
              i++;
        }
    
        return root;
    }
    
    public static void main(String args[]) throws IOException {
    
       BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int t = Integer.parseInt(br.readLine().trim());
        while(t>0)
        {
            String s = br.readLine();
            Node root1 = buildTree(s);
            
            s = br.readLine();
            Node root2 = buildTree(s);
            
            Solution T = new Solution();
            List<Integer> ans = T.merge(root1,root2);
            for(int i=0;i<ans.size();i++)
                System.out.print(ans.get(i) + " ");
            System.out.println();
            
            t--;
        }
    }
}
// } Driver Code Ends


//User function Template for Java

// class Node  
// { 
//     int data; 
//     Node left, right; 
   
//     public Node(int d)  
//     { 
//         data = d; 
//         left = right = null; 
//     } 
// }

class Solution{
    void dis(Stack<Node> s){
        for(Node e : s)
            System.out.print(e.data+" ");
        System.out.println();
    }
    public List<Integer> merge(Node root1,Node root2)
    {
        List<Integer> res = new ArrayList<>();
        Stack<Node> s1 = new Stack<>(),
                    s2 = new Stack<>();
                    
        Node cur_1=root1, cur_2=root2;
        boolean done = false;
        
        while(!done){
            while(cur_1!=null){
                s1.push(cur_1);
                cur_1 = cur_1.left;
            }
            while(cur_2!=null){
                s2.push(cur_2);
                cur_2 = cur_2.left;
            }
            
            done = s1.isEmpty() && s2.isEmpty();
            
            if(!s2.isEmpty() && !s1.isEmpty()){
                if(s1.peek().data<=s2.peek().data){
                    cur_1 = s1.pop();
                    res.add(cur_1.data);
                    cur_1 = cur_1.right;
                }else{
                    cur_2 = s2.pop();
                    res.add(cur_2.data);
                    cur_2 = cur_2.right;
                }
            }else if(!s2.isEmpty()){
                cur_2 = s2.pop();
                res.add(cur_2.data);
                cur_2 = cur_2.right;
            }else if(!s1.isEmpty()){
                cur_1 = s1.pop();
                res.add(cur_1.data);
                cur_1 = cur_1.right;
            }
        }
        return res;
    }
}
