Given an array arr[] of N elements, the task is to find the maximum sum of lengths of all non-overlapping subarrays with K as the maximum element in the subarray.

Example 1:

Input: N = 9, K = 4
arr[] = {2, 1, 4, 9, 2, 3, 8, 3, 4} 
Output: 5
Explanation: {2, 1, 4} => Length = 3
             {3, 4} => Length = 2
             So, 3 + 2 = 5 is the answer.

Example 2:

Input: N = 7, K = 4
arr[] = {1, 2, 3, 2, 3, 4, 1} 
Output:  7
Explanation: {1, 2, 3, 2, 3, 4, 1} 
             => Length = 7.
 

Your Task:
This is a function problem. You don't need to take any input, as it is already accomplished by the driver code. You just need to complete the function calculateMaxSumLength() that takes array arr, integer N, and integer K as parameters and returns the sum of the length of all such subarrays.

 

Expected Time Complexity: O(N). 
Expected Auxiliary Space: O(1).

 

Constraints:
1 ≤ N ≤ 106

// { Driver Code Starts
//Initial Template for Java


//Initial Template for Java



import java.io.*;
import java.util.*;


 // } Driver Code Ends


//User function Template for Java



class Solution
{
    long calculateMaxSumLength(long a[], int n,int k)
    {
        int res = 0;
        for(int i = 0 ; i < n ;){
            if(a[i]!=k){
                i++;
                continue;
            }
            int r=i+1, l=i-1;
            while(r<n && a[r]<a[i]){a[r]=k+1;  r++;}
            r--;
            while(l>=0 && a[l]<a[i]){a[l]=k+1;  l--;}
            l++;
            res += r-l+1;
            i = r+1;
        }
        return res;
    }
}


// { Driver Code Starts.

// Driver class
class Array {

    // Driver code
    public static void main(String[] args) throws IOException {
        // Taking input using buffered reader
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

        int testcases = Integer.parseInt(br.readLine());
        // looping through all testcases
        while (testcases-- > 0) {
            int n = Integer.parseInt(br.readLine());
//            String line = br.readLine();
//            String[] q = line.trim().split("\\s+");
//            int n =Integer.parseInt(q[0]);
//            int m =Integer.parseInt(q[1]);
//            //int y =Integer.parseInt(q[2]);
            String line1 = br.readLine();
            String[] a1 = line1.trim().split("\\s+");
            long a[] = new long[n];
            for (int i = 0; i < n; i++) {
                a[i] = Long.parseLong(a1[i]);
            }
//            String line2 = br.readLine();
//            String[] a2 = line2.trim().split("\\s+");
//            long b[] = new long[m];
//            for (int i = 0; i < m; i++) {
//                b[i] = Long.parseLong(a2[i]);
//            }
            int k = Integer.parseInt(br.readLine());
            Solution ob = new Solution();
            long ans=ob.calculateMaxSumLength(a,n,k);
            System.out.println(ans);
        }
    }
}



  // } Driver Code Ends