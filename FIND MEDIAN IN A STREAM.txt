Given an input stream of N integers. The task is to insert these numbers into a new stream and find the median of the stream formed by each insertion of X to the new stream.

Example 1:

Input:
N = 4
X[] = 5,15,1,3
Output:
5
10
5
4
Explanation:Flow in stream : 5, 15, 1, 3 
5 goes to stream --> median 5 (5) 
15 goes to stream --> median 10 (5,15) 
1 goes to stream --> median 5 (5,15,1) 
3 goes to stream --> median 4 (5,15,1 3) 
 

Example 2:

Input:
N = 3
X[] = 5,10,15
Output:
5
7.5
10
Explanation:Flow in stream : 5, 10, 15
5 goes to stream --> median 5 (5) 
10 goes to stream --> median 7.5 (5,10) 
15 goes to stream --> median 10 (5,10,15) 
Your Task:
You are required to complete 3 methods insertHeap() which takes 1 argument, balanceHeaps() and getMedian() and returns the current median.
Expected Time Complexity : O(nlogn)
Expected Auxilliary Space : O(n)
 
Constraints:
1 <= N <= 106
1 <= x <= 106




// { Driver Code Starts
import java.util.*;
import java.io.*;
import java.lang.*;


class Driverclass
{
    public static void main (String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        
        int n;
        while(t-- > 0){
            n = sc.nextInt();
    
            FindMedian Ans = new FindMedian();
            for(int i = 1; i <= n; i++)
            {
                int x =sc.nextInt();
                Ans.insertHeap(x);
                System.out.println((int)Math.floor(Ans.getMedian()));
            }
        }
        
        
    }
}

// } Driver Code Ends


class FindMedian
{
    static PriorityQueue<Integer> max = new PriorityQueue<>(Collections.reverseOrder());
    static PriorityQueue<Integer> min = new PriorityQueue<>();
    static{
        max.add(Integer.MIN_VALUE);
        min.add(Integer.MAX_VALUE);
    }
    public static void insertHeap(int x)
    {
        int temp =x;
        if(max.size()==min.size()){
            if(x>min.peek()){
                temp = min.remove();
                min.add(x);
            }
            max.add(temp);
        }else{
            if(x<max.peek()){
                temp = max.remove();
                max.add(x);
            }
            min.add(temp);
        }
    }
    
    public static double getMedian()
    {
        if(min.size()==max.size()) return (max.peek()+min.peek())/2.0;
        return max.peek();
    }
    
}